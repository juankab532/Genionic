{"version":3,"sources":["../../../src/@ionic-native/plugins/background-geolocation/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport interface BackgroundGeolocationResponse {\r\n\r\n  /**\r\n   * ID of location as stored in DB (or null)\r\n   */\r\n  locationId: number;\r\n\r\n  /**\r\n   * Service provider\r\n   */\r\n  serviceProvider: string;\r\n\r\n  /**\r\n   * true if location recorded as part of debug\r\n   */\r\n  debug: boolean;\r\n\r\n  /**\r\n   * UTC time of this fix, in milliseconds since January 1, 1970.\r\n   */\r\n  time: number;\r\n\r\n  /**\r\n   * latitude, in degrees.\r\n   */\r\n  latitude: number;\r\n\r\n  /**\r\n   * longitude, in degrees.\r\n   */\r\n  longitude: number;\r\n\r\n  /**\r\n   * estimated accuracy of this location, in meters.\r\n   */\r\n  accuracy: number;\r\n\r\n  /**\r\n   * speed if it is available, in meters/second over ground.\r\n   */\r\n  speed: number;\r\n\r\n  /**\r\n   * altitude if available, in meters above the WGS 84 reference ellipsoid.\r\n   */\r\n  altitude: number;\r\n\r\n  /**\r\n    * accuracy of the altitude if available.\r\n    */\r\n  altitudeAccuracy: number;\r\n\r\n  /**\r\n   * bearing, in degrees.\r\n   */\r\n  bearing: number;\r\n\r\n  /**\r\n   * A Coordinates object defining the current location\r\n   */\r\n  coords: Coordinates;\r\n\r\n  /**\r\n   * A timestamp representing the time at which the location was retrieved.\r\n   */\r\n  timestamp: number;\r\n}\r\n\r\nexport interface BackgroundGeolocationConfig {\r\n\r\n  /**\r\n   * Desired accuracy in meters. Possible values [0, 10, 100, 1000]. The lower\r\n   * the number, the more power devoted to GeoLocation resulting in higher\r\n   * accuracy readings. 1000 results in lowest power drain and least accurate\r\n   * readings. @see Apple docs (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instp/CLLocationManager/desiredAccuracy)\r\n   */\r\n  desiredAccuracy: number;\r\n\r\n  /**\r\n   * Stationary radius in meters. When stopped, the minimum distance the device\r\n   * must move beyond the stationary location for aggressive background-tracking\r\n   * to engage.\r\n   */\r\n  stationaryRadius: number;\r\n\r\n  /**\r\n   * When enabled, the plugin will emit sounds for life-cycle events of\r\n   * background-geolocation! See debugging sounds table.\r\n   */\r\n  debug?: boolean;\r\n\r\n  /**\r\n   * The minimum distance (measured in meters) a device must move horizontally\r\n   * before an update event is generated. @see Apple docs. (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/distanceFilter)\r\n   */\r\n  distanceFilter: number;\r\n\r\n  /**\r\n   * IOS, ANDROID ONLY\r\n   * Enable this in order to force a stop() when the application terminated\r\n   * (e.g. on iOS, double-tap home button, swipe away the app).o\r\n   *\r\n   * Defaults to true\r\n   */\r\n  stopOnTerminate?: boolean;\r\n\r\n  /** \r\n   * ANDROID ONLY \r\n   * Start background service on device boot. \r\n   *\r\n   * Defaults to false \r\n   */\r\n  startOnBoot?: boolean;\r\n\r\n  /** \r\n   * ANDROID ONLY \r\n   * If false location service will not be started in foreground and no notification will be shown.\r\n   *\r\n   * Defaults to true \r\n   */\r\n  startForeground?: boolean;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * When using BackgroundGeolocation.LocationProvider.ANDROID_DISTANCE_FILTER_PROVIDER:\r\n   * The minimum time interval between location updates in milliseconds.\r\n   * @see Android docs (http://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.app.PendingIntent))\r\n   * and the MS doc (http://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.geolocation.geolocator.reportinterval)\r\n   * for more information\r\n   * When using BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER:\r\n   * Rate in milliseconds at which your app prefers to receive location updates.\r\n   * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getInterval())\r\n   */\r\n  interval?: number;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Custom notification title in the drawer.\r\n   */\r\n  notificationTitle?: string;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Custom notification text in the drawer.\r\n   */\r\n  notificationText?: string;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * The accent color to use for notification. Eg. #4CAF50.\r\n   */\r\n  notificationIconColor?: string;\r\n\r\n  /** \r\n   * ANDROID ONLY \r\n   * The filename of a custom notification icon. See android quirks. \r\n   * NOTE: Only available for API Level >=21. \r\n   */\r\n  notificationIconLarge?: string;\r\n\r\n  /** \r\n   * ANDROID ONLY \r\n   * The filename of a custom notification icon. See android quirks. \r\n   * NOTE: Only available for API Level >=21. \r\n   */\r\n  notificationIconSmall?: string;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Set location service provider @see wiki (https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers)\r\n   */\r\n  locationProvider?: number;\r\n\r\n  /**\r\n   * IOS ONLY\r\n   * [AutomotiveNavigation, OtherNavigation, Fitness, Other] Presumably,\r\n   * this affects iOS GPS algorithm. @see Apple docs for more information\r\n   * (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/activityType)\r\n   */\r\n  activityType?: string;\r\n\r\n  /** \r\n   * IOS ONLY \r\n   * Pauses location updates when app is paused \r\n   *\r\n   * Defaults to true \r\n   */\r\n  pauseLocationUpdates?: boolean;\r\n\r\n  /** \r\n   * Server url where to send HTTP POST with recorded locations \r\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting \r\n   */\r\n  url?: string;\r\n\r\n  /** \r\n   * Server url where to send fail to post locations \r\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting \r\n   */\r\n  syncUrl?: string;\r\n\r\n  /**\r\n   * Specifies how many previously failed locations will be sent to server at once \r\n   *\r\n   * Defaults to 100 \r\n   */\r\n  syncThreshold?: number;\r\n\r\n  /** \r\n   * Optional HTTP headers sent along in HTTP request \r\n   */\r\n  httpHeaders?: any;\r\n\r\n  /**\r\n   * IOS ONLY \r\n   * Switch to less accurate significant changes and region monitory when in background (default)\r\n   *\r\n   * Defaults to 100 \r\n   */\r\n  saveBatteryOnBackground?: boolean;\r\n\r\n  /** \r\n   * Limit maximum number of locations stored into db \r\n   *\r\n   * Defaults to 10000 \r\n   */\r\n  maxLocations?: number;\r\n\r\n  /**\r\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n   *\r\n   * Fastest rate in milliseconds at which your app can handle location updates.\r\n   * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getFastestInterval())\r\n   */\r\n  fastestInterval?: number;\r\n\r\n  /**\r\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n   *\r\n   * Rate in milliseconds at which activity recognition occurs. Larger values will result in fewer activity detections while improving battery life.\r\n   */\r\n  activitiesInterval?: number;\r\n\r\n  /**\r\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n   *\r\n   * stop() is forced, when the STILL activity is detected (default is true)\r\n   */\r\n  stopOnStillActivity?: boolean;\r\n}\r\n\r\n/**\r\n * @name Background Geolocation\r\n * @description\r\n * This plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\r\n * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\r\n *\r\n * @usage\r\n *\r\n * BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\r\n *\r\n * ```typescript\r\n * import { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationResponse } from '@ionic-native/background-geolocation';\r\n *\r\n * constructor(private backgroundGeolocation: BackgroundGeolocation) { }\r\n *\r\n * ...\r\n *\r\n * const config: BackgroundGeolocationConfig = {\r\n *             desiredAccuracy: 10,\r\n *             stationaryRadius: 20,\r\n *             distanceFilter: 30,\r\n *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.\r\n *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates\r\n *     };\r\n *\r\n * this.backgroundGeolocation.configure(config)\r\n *   .subscribe((location: BackgroundGeolocationResponse) => {\r\n *\r\n *     console.log(location);\r\n *\r\n *     // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\r\n *     // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.\r\n *     // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\r\n *     this.backgroundGeolocation.finish(); // FOR IOS ONLY\r\n *\r\n *   });\r\n *\r\n * // start recording location\r\n * this.backgroundGeolocation.start();\r\n *\r\n * // If you wish to turn OFF background-tracking, call the #stop method.\r\n * this.backgroundGeolocation.stop();\r\n *\r\n * ```\r\n * @interfaces\r\n * BackgroundGeolocationResponse\r\n * BackgroundGeolocationConfig\r\n */\r\n@Plugin({\r\n  pluginName: 'BackgroundGeolocation',\r\n  plugin: 'cordova-plugin-mauron85-background-geolocation',\r\n  pluginRef: 'backgroundGeolocation',\r\n  repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class BackgroundGeolocation extends IonicNativePlugin {\r\n\r\n  /** \r\n   * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers \r\n   *\r\n   * Possible values:\r\n   *  ANDROID_DISTANCE_FILTER_PROVIDER: 0, \r\n   *  ANDROID_ACTIVITY_PROVIDER: 1 \r\n   *\r\n   * @enum {number} \r\n   */\r\n  LocationProvider: any = {\r\n    ANDROID_DISTANCE_FILTER_PROVIDER: 0,\r\n    ANDROID_ACTIVITY_PROVIDER: 1\r\n  };\r\n\r\n  /**\r\n   * Desired accuracy in meters. Possible values [0, 10, 100, 1000]. \r\n   * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings. \r\n   * 1000 results in lowest power drain and least accurate readings. \r\n   *\r\n   * Possible values:\r\n   *  HIGH: 0 \r\n   *  MEDIUM: 10 \r\n   *  LOW: 100 \r\n   *  PASSIVE: 1000\r\n   *\r\n   * enum {number} \r\n   */\r\n  Accuracy: any = {\r\n    HIGH: 0,\r\n    MEDIUM: 10,\r\n    LOW: 100,\r\n    PASSIVE: 1000\r\n  };\r\n\r\n  /** \r\n   * Used in the switchMode function \r\n   *\r\n   * Possible values:\r\n   *  BACKGROUND: 0\r\n   *  FOREGROUND: 1 \r\n   *\r\n   * @enum {number} \r\n   */\r\n  Mode: any = {\r\n    BACKGROUND: 0,\r\n    FOREGROUND: 1\r\n  };\r\n\r\n  /**\r\n   * Configure the plugin.\r\n   *\r\n   * @param options {BackgroundGeolocationConfig} options An object of type Config\r\n   * @return {Observable<BackgroundGeolocationResponse>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse',\r\n    observable: true\r\n  })\r\n  configure(options: BackgroundGeolocationConfig): Observable<BackgroundGeolocationResponse> { return; }\r\n\r\n  /**\r\n   * Turn ON the background-geolocation system.\r\n   * The user will be tracked whenever they suspend the app.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  start(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Turn OFF background-tracking\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  stop(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Inform the native plugin that you're finished, the background-task may be completed\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  finish(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Force the plugin to enter \"moving\" or \"stationary\" state\r\n   * @param isMoving {boolean}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  changePace(isMoving: boolean): Promise<any> { return; }\r\n\r\n  /**\r\n   * Setup configuration\r\n   * @param options {BackgroundGeolocationConfig}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  setConfig(options: BackgroundGeolocationConfig): Promise<any> { return; }\r\n\r\n  /**\r\n   * Returns current stationaryLocation if available. null if not\r\n   * @returns {Promise<Location>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  getStationaryLocation(): Promise<BackgroundGeolocationResponse> { return; }\r\n\r\n  /**\r\n   * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\r\n   * your #success callback will be executed with #location param containing #radius of region\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  onStationary(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Check if location is enabled on the device\r\n   * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  isLocationEnabled(): Promise<number> { return; }\r\n\r\n  /**\r\n   * Display app settings to change permissions\r\n   */\r\n  @Cordova({ sync: true })\r\n  showAppSettings(): void { }\r\n\r\n  /**\r\n   * Display device location settings\r\n   */\r\n  @Cordova({ sync: true })\r\n  showLocationSettings(): void { }\r\n\r\n  /**\r\n   * Method can be used to detect user changes in location services settings.\r\n   * If user enable or disable location services then success callback will be executed.\r\n   * In case or error (SettingNotFoundException) fail callback will be executed.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  watchLocationMode(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Stop watching for location mode changes.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  stopWatchingLocationMode(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Method will return all stored locations.\r\n   * Locations are stored when:\r\n   *  - config.stopOnTerminate is false and main activity was killed\r\n   *    by the system\r\n   *  or\r\n   *  - option.debug is true\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  getLocations(): Promise<any> { return; }\r\n\r\n  /** \r\n   * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId. \r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getValidLocations(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Delete stored location by given locationId.\r\n   * @param locationId {number}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  deleteLocation(locationId: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Delete all stored locations.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  deleteAllLocations(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\r\n   * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\r\n   *\r\n   * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\r\n   * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only. \r\n   *\r\n   * BackgroundGeolocation.Mode.FOREGROUND\r\n   * BackgroundGeolocation.Mode.BACKGROUND \r\n   **\r\n   * @param modeId {number}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  switchMode(modeId: number): Promise<any> { return; }\r\n\r\n  /** \r\n   * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries. \r\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information. \r\n   *\r\n   * @param limit {number} Limits the number of entries \r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getLogEntries(limit: number): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}