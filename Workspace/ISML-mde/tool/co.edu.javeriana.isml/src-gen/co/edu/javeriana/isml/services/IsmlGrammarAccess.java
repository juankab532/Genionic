/*
 * generated by Xtext
 */
package co.edu.javeriana.isml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IsmlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class InformationSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.InformationSystem");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyPackageParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//InformationSystem:
		//	body+=Package+;
		@Override public ParserRule getRule() { return rule; }

		//body+=Package+
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//Package
		public RuleCall getBodyPackageParserRuleCall_0() { return cBodyPackageParserRuleCall_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cResourcesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHasBodyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_4_1_0 = (Keyword)cHasBodyAssignment_4_1.eContents().get(0);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyResourceParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cBodyAlternatives_5_0 = (Alternatives)cBodyAssignment_5.eContents().get(0);
		private final RuleCall cBodyEntityParserRuleCall_5_0_0 = (RuleCall)cBodyAlternatives_5_0.eContents().get(0);
		private final RuleCall cBodyDTOParserRuleCall_5_0_1 = (RuleCall)cBodyAlternatives_5_0.eContents().get(1);
		private final RuleCall cBodyViewParserRuleCall_5_0_2 = (RuleCall)cBodyAlternatives_5_0.eContents().get(2);
		private final RuleCall cBodyControllerParserRuleCall_5_0_3 = (RuleCall)cBodyAlternatives_5_0.eContents().get(3);
		private final RuleCall cBodyPrimitiveParserRuleCall_5_0_4 = (RuleCall)cBodyAlternatives_5_0.eContents().get(4);
		private final RuleCall cBodyConstraintParserRuleCall_5_0_5 = (RuleCall)cBodyAlternatives_5_0.eContents().get(5);
		private final RuleCall cBodyResourceBundleParserRuleCall_5_0_6 = (RuleCall)cBodyAlternatives_5_0.eContents().get(6);
		private final RuleCall cBodyActorParserRuleCall_5_0_7 = (RuleCall)cBodyAlternatives_5_0.eContents().get(7);
		private final RuleCall cBodyServiceParserRuleCall_5_0_8 = (RuleCall)cBodyAlternatives_5_0.eContents().get(8);
		private final RuleCall cBodyEnumParserRuleCall_5_0_9 = (RuleCall)cBodyAlternatives_5_0.eContents().get(9);
		
		//Package:
		//	'package' name=QualifiedName ';'
		//	imports+=Import* ('resources' hasBody?='{' body+=Resource* '}')?
		//	body+=(Entity | DTO | View | Controller | Primitive | Constraint | ResourceBundle | Actor | Service | Enum)*;
		@Override public ParserRule getRule() { return rule; }

		//'package' name=QualifiedName ';' imports+=Import* ('resources' hasBody?='{' body+=Resource* '}')? body+=(Entity | DTO |
		//View | Controller | Primitive | Constraint | ResourceBundle | Actor | Service | Enum)*
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//('resources' hasBody?='{' body+=Resource* '}')?
		public Group getGroup_4() { return cGroup_4; }

		//'resources'
		public Keyword getResourcesKeyword_4_0() { return cResourcesKeyword_4_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_4_1() { return cHasBodyAssignment_4_1; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_4_1_0() { return cHasBodyLeftCurlyBracketKeyword_4_1_0; }

		//body+=Resource*
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }

		//Resource
		public RuleCall getBodyResourceParserRuleCall_4_2_0() { return cBodyResourceParserRuleCall_4_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//body+=(Entity | DTO | View | Controller | Primitive | Constraint | ResourceBundle | Actor | Service | Enum)*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//(Entity | DTO | View | Controller | Primitive | Constraint | ResourceBundle | Actor | Service | Enum)
		public Alternatives getBodyAlternatives_5_0() { return cBodyAlternatives_5_0; }

		//Entity
		public RuleCall getBodyEntityParserRuleCall_5_0_0() { return cBodyEntityParserRuleCall_5_0_0; }

		//DTO
		public RuleCall getBodyDTOParserRuleCall_5_0_1() { return cBodyDTOParserRuleCall_5_0_1; }

		//View
		public RuleCall getBodyViewParserRuleCall_5_0_2() { return cBodyViewParserRuleCall_5_0_2; }

		//Controller
		public RuleCall getBodyControllerParserRuleCall_5_0_3() { return cBodyControllerParserRuleCall_5_0_3; }

		//Primitive
		public RuleCall getBodyPrimitiveParserRuleCall_5_0_4() { return cBodyPrimitiveParserRuleCall_5_0_4; }

		//Constraint
		public RuleCall getBodyConstraintParserRuleCall_5_0_5() { return cBodyConstraintParserRuleCall_5_0_5; }

		//ResourceBundle
		public RuleCall getBodyResourceBundleParserRuleCall_5_0_6() { return cBodyResourceBundleParserRuleCall_5_0_6; }

		//Actor
		public RuleCall getBodyActorParserRuleCall_5_0_7() { return cBodyActorParserRuleCall_5_0_7; }

		//Service
		public RuleCall getBodyServiceParserRuleCall_5_0_8() { return cBodyServiceParserRuleCall_5_0_8; }

		//Enum
		public RuleCall getBodyEnumParserRuleCall_5_0_9() { return cBodyEnumParserRuleCall_5_0_9; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedPackagePackageCrossReference_1_0 = (CrossReference)cImportedPackageAssignment_1.eContents().get(0);
		private final RuleCall cImportedPackagePackageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cImportedPackagePackageCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	'import' importedPackage=[Package|QualifiedName] '.*' ';';
		@Override public ParserRule getRule() { return rule; }

		//'import' importedPackage=[Package|QualifiedName] '.*' ';'
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedPackage=[Package|QualifiedName]
		public Assignment getImportedPackageAssignment_1() { return cImportedPackageAssignment_1; }

		//[Package|QualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_1_0() { return cImportedPackagePackageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getImportedPackagePackageQualifiedNameParserRuleCall_1_0_1() { return cImportedPackagePackageQualifiedNameParserRuleCall_1_0_1; }

		//'.*'
		public Keyword getFullStopAsteriskKeyword_2() { return cFullStopAsteriskKeyword_2; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameResourceNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Resource:
		//	name=ResourceName ';';
		@Override public ParserRule getRule() { return rule; }

		//name=ResourceName ';'
		public Group getGroup() { return cGroup; }

		//name=ResourceName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ResourceName
		public RuleCall getNameResourceNameParserRuleCall_0_0() { return cNameResourceNameParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ResourceBundleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ResourceBundle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceBundleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyResourceAssignmentParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ResourceBundle:
		//	'resourceBundle' name=UPPER_CASE_ID '{'
		//	body+=ResourceAssignment*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'resourceBundle' name=UPPER_CASE_ID '{' body+=ResourceAssignment* '}'
		public Group getGroup() { return cGroup; }

		//'resourceBundle'
		public Keyword getResourceBundleKeyword_0() { return cResourceBundleKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body+=ResourceAssignment*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ResourceAssignment
		public RuleCall getBodyResourceAssignmentParserRuleCall_3_0() { return cBodyResourceAssignmentParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ResourceAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ResourceAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftResourceReferenceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightStringValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceAssignment:
		//	left=ResourceReference '=' right=StringValue ';';
		@Override public ParserRule getRule() { return rule; }

		//left=ResourceReference '=' right=StringValue ';'
		public Group getGroup() { return cGroup; }

		//left=ResourceReference
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//ResourceReference
		public RuleCall getLeftResourceReferenceParserRuleCall_0_0() { return cLeftResourceReferenceParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=StringValue
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//StringValue
		public RuleCall getRightStringValueParserRuleCall_2_0() { return cRightStringValueParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_3_2_1_0 = (RuleCall)cSuperTypesAssignment_3_2_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cHasBodyAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_4_0_0_0 = (Keyword)cHasBodyAssignment_4_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cBodyAttributeParserRuleCall_4_0_1_0 = (RuleCall)cBodyAssignment_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//// Types
		//Entity:
		//	abstract?='abstract'? 'entity' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{'
		//	body+=Attribute* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//abstract?='abstract'? 'entity' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{'
		//body+=Attribute* '}' | ';')
		public Group getGroup() { return cGroup; }

		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_2_0() { return cNameUPPER_CASE_IDTerminalRuleCall_2_0; }

		//('extends' superTypes+=Type (',' superTypes+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_3_1_0() { return cSuperTypesTypeParserRuleCall_3_1_0; }

		//(',' superTypes+=Type)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_3_2_1() { return cSuperTypesAssignment_3_2_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_3_2_1_0() { return cSuperTypesTypeParserRuleCall_3_2_1_0; }

		//hasBody?='{' body+=Attribute* '}' | ';'
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//hasBody?='{' body+=Attribute* '}'
		public Group getGroup_4_0() { return cGroup_4_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_4_0_0() { return cHasBodyAssignment_4_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_4_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_4_0_0_0; }

		//body+=Attribute*
		public Assignment getBodyAssignment_4_0_1() { return cBodyAssignment_4_0_1; }

		//Attribute
		public RuleCall getBodyAttributeParserRuleCall_4_0_1_0() { return cBodyAttributeParserRuleCall_4_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }

		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMustKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cBeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConstraintsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConstraintsConstraintInstanceParserRuleCall_2_2_0 = (RuleCall)cConstraintsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintInstanceParserRuleCall_2_3_1_0 = (RuleCall)cConstraintsAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOppositeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOppositeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cOppositeAttributeCrossReference_3_1_0 = (CrossReference)cOppositeAssignment_3_1.eContents().get(0);
		private final RuleCall cOppositeAttributeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cOppositeAttributeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Attribute:
		//	type=Type name=LOWER_CASE_ID ('must' 'be'? constraints+=ConstraintInstance (',' constraints+=ConstraintInstance)*)?
		//	('opposite' opposite=[Attribute|QualifiedName])? ';';
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=LOWER_CASE_ID ('must' 'be'? constraints+=ConstraintInstance (',' constraints+=ConstraintInstance)*)?
		//('opposite' opposite=[Attribute|QualifiedName])? ';'
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_0; }

		//('must' 'be'? constraints+=ConstraintInstance (',' constraints+=ConstraintInstance)*)?
		public Group getGroup_2() { return cGroup_2; }

		//'must'
		public Keyword getMustKeyword_2_0() { return cMustKeyword_2_0; }

		//'be'?
		public Keyword getBeKeyword_2_1() { return cBeKeyword_2_1; }

		//constraints+=ConstraintInstance
		public Assignment getConstraintsAssignment_2_2() { return cConstraintsAssignment_2_2; }

		//ConstraintInstance
		public RuleCall getConstraintsConstraintInstanceParserRuleCall_2_2_0() { return cConstraintsConstraintInstanceParserRuleCall_2_2_0; }

		//(',' constraints+=ConstraintInstance)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//constraints+=ConstraintInstance
		public Assignment getConstraintsAssignment_2_3_1() { return cConstraintsAssignment_2_3_1; }

		//ConstraintInstance
		public RuleCall getConstraintsConstraintInstanceParserRuleCall_2_3_1_0() { return cConstraintsConstraintInstanceParserRuleCall_2_3_1_0; }

		//('opposite' opposite=[Attribute|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//'opposite'
		public Keyword getOppositeKeyword_3_0() { return cOppositeKeyword_3_0; }

		//opposite=[Attribute|QualifiedName]
		public Assignment getOppositeAssignment_3_1() { return cOppositeAssignment_3_1; }

		//[Attribute|QualifiedName]
		public CrossReference getOppositeAttributeCrossReference_3_1_0() { return cOppositeAttributeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getOppositeAttributeQualifiedNameParserRuleCall_3_1_0_1() { return cOppositeAttributeQualifiedNameParserRuleCall_3_1_0_1; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.DTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_2_1_0 = (RuleCall)cSuperTypesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_2_2_1_0 = (RuleCall)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cHasBodyAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_3_0_0_0 = (Keyword)cHasBodyAssignment_3_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cBodyDTOAttributeParserRuleCall_3_0_1_0 = (RuleCall)cBodyAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//DTO:
		//	'dto' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=DTOAttribute* '}' |
		//	';');
		@Override public ParserRule getRule() { return rule; }

		//'dto' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=DTOAttribute* '}' |
		//';')
		public Group getGroup() { return cGroup; }

		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('extends' superTypes+=Type (',' superTypes+=Type)*)?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_2_1_0() { return cSuperTypesTypeParserRuleCall_2_1_0; }

		//(',' superTypes+=Type)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_2_2_1_0() { return cSuperTypesTypeParserRuleCall_2_2_1_0; }

		//hasBody?='{' body+=DTOAttribute* '}' | ';'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//hasBody?='{' body+=DTOAttribute* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_3_0_0() { return cHasBodyAssignment_3_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_3_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_3_0_0_0; }

		//body+=DTOAttribute*
		public Assignment getBodyAssignment_3_0_1() { return cBodyAssignment_3_0_1; }

		//DTOAttribute
		public RuleCall getBodyDTOAttributeParserRuleCall_3_0_1_0() { return cBodyDTOAttributeParserRuleCall_3_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class DTOAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.DTOAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DTOAttribute Attribute:
		//	type=Type name=LOWER_CASE_ID ';';
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=LOWER_CASE_ID ';'
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyEnumItemParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBodyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBodyEnumItemParserRuleCall_4_1_0 = (RuleCall)cBodyAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enum:
		//	'enum' name=UPPER_CASE_ID '{' body+=EnumItem (',' body+=EnumItem)* '}';
		@Override public ParserRule getRule() { return rule; }

		//'enum' name=UPPER_CASE_ID '{' body+=EnumItem (',' body+=EnumItem)* '}'
		public Group getGroup() { return cGroup; }

		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body+=EnumItem
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//EnumItem
		public RuleCall getBodyEnumItemParserRuleCall_3_0() { return cBodyEnumItemParserRuleCall_3_0; }

		//(',' body+=EnumItem)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//body+=EnumItem
		public Assignment getBodyAssignment_4_1() { return cBodyAssignment_4_1; }

		//EnumItem
		public RuleCall getBodyEnumItemParserRuleCall_4_1_0() { return cBodyEnumItemParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.EnumItem");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumItem:
		//	name=LOWER_CASE_ID;
		@Override public ParserRule getRule() { return rule; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_0() { return cNameLOWER_CASE_IDTerminalRuleCall_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=LOWER_CASE_ID;
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=LOWER_CASE_ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterizedTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	=> ParameterizedType | SimpleType;
		@Override public ParserRule getRule() { return rule; }

		//=> ParameterizedType | SimpleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ParameterizedType
		public RuleCall getParameterizedTypeParserRuleCall_0() { return cParameterizedTypeParserRuleCall_0; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
	}

	public class ParameterizedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ParameterizedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencedElementTypeSpecificationCrossReference_0_0 = (CrossReference)cReferencedElementAssignment_0.eContents().get(0);
		private final RuleCall cReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cReferencedElementTypeSpecificationCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeParametersTypeParserRuleCall_2_0 = (RuleCall)cTypeParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeParametersTypeParserRuleCall_3_1_0 = (RuleCall)cTypeParametersAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterizedType:
		//	referencedElement=[TypeSpecification|UPPER_CASE_ID] => '<' typeParameters+=Type (',' typeParameters+=Type)* '>';
		@Override public ParserRule getRule() { return rule; }

		//referencedElement=[TypeSpecification|UPPER_CASE_ID] => '<' typeParameters+=Type (',' typeParameters+=Type)* '>'
		public Group getGroup() { return cGroup; }

		//referencedElement=[TypeSpecification|UPPER_CASE_ID]
		public Assignment getReferencedElementAssignment_0() { return cReferencedElementAssignment_0; }

		//[TypeSpecification|UPPER_CASE_ID]
		public CrossReference getReferencedElementTypeSpecificationCrossReference_0_0() { return cReferencedElementTypeSpecificationCrossReference_0_0; }

		//UPPER_CASE_ID
		public RuleCall getReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_0_1() { return cReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_0_1; }

		//=> '<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//typeParameters+=Type
		public Assignment getTypeParametersAssignment_2() { return cTypeParametersAssignment_2; }

		//Type
		public RuleCall getTypeParametersTypeParserRuleCall_2_0() { return cTypeParametersTypeParserRuleCall_2_0; }

		//(',' typeParameters+=Type)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//typeParameters+=Type
		public Assignment getTypeParametersAssignment_3_1() { return cTypeParametersAssignment_3_1; }

		//Type
		public RuleCall getTypeParametersTypeParserRuleCall_3_1_0() { return cTypeParametersTypeParserRuleCall_3_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.SimpleType");
		private final Assignment cReferencedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedElementTypeSpecificationCrossReference_0 = (CrossReference)cReferencedElementAssignment.eContents().get(0);
		private final RuleCall cReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_1 = (RuleCall)cReferencedElementTypeSpecificationCrossReference_0.eContents().get(1);
		
		//SimpleType Type:
		//	referencedElement=[TypeSpecification|UPPER_CASE_ID];
		@Override public ParserRule getRule() { return rule; }

		//referencedElement=[TypeSpecification|UPPER_CASE_ID]
		public Assignment getReferencedElementAssignment() { return cReferencedElementAssignment; }

		//[TypeSpecification|UPPER_CASE_ID]
		public CrossReference getReferencedElementTypeSpecificationCrossReference_0() { return cReferencedElementTypeSpecificationCrossReference_0; }

		//UPPER_CASE_ID
		public RuleCall getReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_1() { return cReferencedElementTypeSpecificationUPPER_CASE_IDTerminalRuleCall_0_1; }
	}

	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cControllerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cViewParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cResourceBundleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TypeSpecification:
		//	Primitive | Entity | Actor | Controller | View | ResourceBundle;
		@Override public ParserRule getRule() { return rule; }

		//Primitive | Entity | Actor | Controller | View | ResourceBundle
		public Alternatives getAlternatives() { return cAlternatives; }

		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }

		//Actor
		public RuleCall getActorParserRuleCall_2() { return cActorParserRuleCall_2; }

		//Controller
		public RuleCall getControllerParserRuleCall_3() { return cControllerParserRuleCall_3; }

		//View
		public RuleCall getViewParserRuleCall_4() { return cViewParserRuleCall_4; }

		//ResourceBundle
		public RuleCall getResourceBundleParserRuleCall_5() { return cResourceBundleParserRuleCall_5; }
	}

	public class ConstraintInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ConstraintInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeConstraintTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_2_1_0 = (RuleCall)cParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ConstraintInstance:
		//	type=ConstraintType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//type=ConstraintType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup() { return cGroup; }

		//type=ConstraintType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ConstraintType
		public RuleCall getTypeConstraintTypeParserRuleCall_0_0() { return cTypeConstraintTypeParserRuleCall_0_0; }

		//('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_0() { return cParametersExpressionParserRuleCall_1_1_0; }

		//(',' parameters+=Expression)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_2_1() { return cParametersAssignment_1_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_2_1_0() { return cParametersExpressionParserRuleCall_1_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ConstraintTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ConstraintType");
		private final Assignment cReferencedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedElementConstraintCrossReference_0 = (CrossReference)cReferencedElementAssignment.eContents().get(0);
		private final RuleCall cReferencedElementConstraintUPPER_CASE_IDTerminalRuleCall_0_1 = (RuleCall)cReferencedElementConstraintCrossReference_0.eContents().get(1);
		
		//ConstraintType Type:
		//	referencedElement=[Constraint|UPPER_CASE_ID];
		@Override public ParserRule getRule() { return rule; }

		//referencedElement=[Constraint|UPPER_CASE_ID]
		public Assignment getReferencedElementAssignment() { return cReferencedElementAssignment; }

		//[Constraint|UPPER_CASE_ID]
		public CrossReference getReferencedElementConstraintCrossReference_0() { return cReferencedElementConstraintCrossReference_0; }

		//UPPER_CASE_ID
		public RuleCall getReferencedElementConstraintUPPER_CASE_IDTerminalRuleCall_0_1() { return cReferencedElementConstraintUPPER_CASE_IDTerminalRuleCall_0_1; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Primitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cGenericTypeParametersAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_0_0 = (RuleCall)cGenericTypeParametersAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cGenericTypeParametersAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_1_1_0 = (RuleCall)cGenericTypeParametersAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_4_1_0 = (RuleCall)cSuperTypesAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Primitive:
		//	abstract?='abstract'? 'primitive'
		//	name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)? ';';
		@Override public ParserRule getRule() { return rule; }

		//abstract?='abstract'? 'primitive' name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)? ';'
		public Group getGroup() { return cGroup; }

		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//'primitive'
		public Keyword getPrimitiveKeyword_1() { return cPrimitiveKeyword_1; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_2_0() { return cNameUPPER_CASE_IDTerminalRuleCall_2_0; }

		//('<' (genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		public Group getGroup_3() { return cGroup_3; }

		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//(genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_3_1_0() { return cGenericTypeParametersAssignment_3_1_0; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_0_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_0_0; }

		//(',' genericTypeParameters+=GenericTypeSpecification)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_3_1_1_1() { return cGenericTypeParametersAssignment_3_1_1_1; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_1_1_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_3_1_1_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }

		//('extends' superTypes+=Type)?
		public Group getGroup_4() { return cGroup_4; }

		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_4_1() { return cSuperTypesAssignment_4_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_4_1_0() { return cSuperTypesTypeParserRuleCall_4_1_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class GenericTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.GenericTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuperTypeTypeParserRuleCall_1_1_0 = (RuleCall)cSuperTypeAssignment_1_1.eContents().get(0);
		
		//GenericTypeSpecification:
		//	name=UPPER_CASE_ID ('extends' superType=Type)?;
		@Override public ParserRule getRule() { return rule; }

		//name=UPPER_CASE_ID ('extends' superType=Type)?
		public Group getGroup() { return cGroup; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_0_0() { return cNameUPPER_CASE_IDTerminalRuleCall_0_0; }

		//('extends' superType=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//'extends'
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//superType=Type
		public Assignment getSuperTypeAssignment_1_1() { return cSuperTypeAssignment_1_1; }

		//Type
		public RuleCall getSuperTypeTypeParserRuleCall_1_1_0() { return cSuperTypeTypeParserRuleCall_1_1_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cGenericTypeParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_0_0 = (RuleCall)cGenericTypeParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cGenericTypeParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_1_1_0 = (RuleCall)cGenericTypeParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Assignment cHasBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_4_0 = (Keyword)cHasBodyAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyFeatureParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Service:
		//	'service' name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)?
		//	hasBody?='{' body+=Feature* '}';
		@Override public ParserRule getRule() { return rule; }

		//'service' name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)? hasBody?='{' body+=Feature* '}'
		public Group getGroup() { return cGroup; }

		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('<' (genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		public Group getGroup_2() { return cGroup_2; }

		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//(genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_2_1_0() { return cGenericTypeParametersAssignment_2_1_0; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_0_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_0_0; }

		//(',' genericTypeParameters+=GenericTypeSpecification)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_2_1_1_1() { return cGenericTypeParametersAssignment_2_1_1_1; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_1_1_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_2_1_1_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }

		//('extends' superTypes+=Type)?
		public Group getGroup_3() { return cGroup_3; }

		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_3_1_0() { return cSuperTypesTypeParserRuleCall_3_1_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_4() { return cHasBodyAssignment_4; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_4_0() { return cHasBodyLeftCurlyBracketKeyword_4_0; }

		//body+=Feature*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Feature
		public RuleCall getBodyFeatureParserRuleCall_5_0() { return cBodyFeatureParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	=> Method | ServiceAttribute;
		@Override public ParserRule getRule() { return rule; }

		//=> Method | ServiceAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Method
		public RuleCall getMethodParserRuleCall_0() { return cMethodParserRuleCall_0; }

		//ServiceAttribute
		public RuleCall getServiceAttributeParserRuleCall_1() { return cServiceAttributeParserRuleCall_1; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNativeMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method:
		//	RegularMethod | NativeMethod;
		@Override public ParserRule getRule() { return rule; }

		//RegularMethod | NativeMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegularMethod
		public RuleCall getRegularMethodParserRuleCall_0() { return cRegularMethodParserRuleCall_0; }

		//NativeMethod
		public RuleCall getNativeMethodParserRuleCall_1() { return cNativeMethodParserRuleCall_1; }
	}

	public class NativeMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.NativeMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNativeNativeKeyword_0_0 = (Keyword)cNativeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cGenericTypeParametersAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_0_0 = (RuleCall)cGenericTypeParametersAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cGenericTypeParametersAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_1_1_0 = (RuleCall)cGenericTypeParametersAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NativeMethod Method:
		//	native?='native' ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? type=Type
		//	name=LOWER_CASE_ID '(' (parameters+=Parameter (','
		//	parameters+=Parameter)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//native?='native' ('<' (genericTypeParameters+=GenericTypeSpecification (','
		//genericTypeParameters+=GenericTypeSpecification)*)? '>')? type=Type name=LOWER_CASE_ID '(' (parameters+=Parameter (','
		//parameters+=Parameter)*)? ')' ';'
		public Group getGroup() { return cGroup; }

		//native?='native'
		public Assignment getNativeAssignment_0() { return cNativeAssignment_0; }

		//'native'
		public Keyword getNativeNativeKeyword_0_0() { return cNativeNativeKeyword_0_0; }

		//('<' (genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		public Group getGroup_1() { return cGroup_1; }

		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//(genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_1_1_0() { return cGenericTypeParametersAssignment_1_1_0; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_0_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_0_0; }

		//(',' genericTypeParameters+=GenericTypeSpecification)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_1_1_1_1() { return cGenericTypeParametersAssignment_1_1_1_1; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_1_1_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_1_1_1_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_3_0() { return cNameLOWER_CASE_IDTerminalRuleCall_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0_0() { return cParametersParameterParserRuleCall_5_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_1_1_0() { return cParametersParameterParserRuleCall_5_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class RegularMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.RegularMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cGenericTypeParametersAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_0_0 = (RuleCall)cGenericTypeParametersAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cGenericTypeParametersAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_1_1_0 = (RuleCall)cGenericTypeParametersAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cHasBodyAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_6_0_0_0 = (Keyword)cHasBodyAssignment_6_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_6_0_1_0 = (RuleCall)cBodyAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//RegularMethod Method:
		//	('<' (genericTypeParameters+=GenericTypeSpecification (','
		//	genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		//	type=Type name=LOWER_CASE_ID
		//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (hasBody?='{' body+=MethodStatement* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//('<' (genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		//type=Type name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (hasBody?='{'
		//body+=MethodStatement* '}' | ';')
		public Group getGroup() { return cGroup; }

		//('<' (genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)? '>')?
		public Group getGroup_0() { return cGroup_0; }

		//'<'
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }

		//(genericTypeParameters+=GenericTypeSpecification (',' genericTypeParameters+=GenericTypeSpecification)*)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_0_1_0() { return cGenericTypeParametersAssignment_0_1_0; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_0_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_0_0; }

		//(',' genericTypeParameters+=GenericTypeSpecification)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//','
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }

		//genericTypeParameters+=GenericTypeSpecification
		public Assignment getGenericTypeParametersAssignment_0_1_1_1() { return cGenericTypeParametersAssignment_0_1_1_1; }

		//GenericTypeSpecification
		public RuleCall getGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_1_1_0() { return cGenericTypeParametersGenericTypeSpecificationParserRuleCall_0_1_1_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_0_2() { return cGreaterThanSignKeyword_0_2; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_2_0() { return cNameLOWER_CASE_IDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//hasBody?='{' body+=MethodStatement* '}' | ';'
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//hasBody?='{' body+=MethodStatement* '}'
		public Group getGroup_6_0() { return cGroup_6_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_6_0_0() { return cHasBodyAssignment_6_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_6_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_6_0_0_0; }

		//body+=MethodStatement*
		public Assignment getBodyAssignment_6_0_1() { return cBodyAssignment_6_0_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_6_0_1_0() { return cBodyMethodStatementParserRuleCall_6_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }

		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}

	public class ServiceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ServiceAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ServiceAttribute Attribute:
		//	'has' type=Type name=LOWER_CASE_ID? ';';
		@Override public ParserRule getRule() { return rule; }

		//'has' type=Type name=LOWER_CASE_ID? ';'
		public Group getGroup() { return cGroup; }

		//'has'
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=LOWER_CASE_ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_2_0() { return cNameLOWER_CASE_IDTerminalRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasBodyAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_2_0_0_0 = (Keyword)cHasBodyAssignment_2_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Alternatives cBodyAlternatives_2_0_1_0 = (Alternatives)cBodyAssignment_2_0_1.eContents().get(0);
		private final RuleCall cBodyServiceAttributeParserRuleCall_2_0_1_0_0 = (RuleCall)cBodyAlternatives_2_0_1_0.eContents().get(0);
		private final RuleCall cBodyActionParserRuleCall_2_0_1_0_1 = (RuleCall)cBodyAlternatives_2_0_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Controller:
		//	'controller' name=UPPER_CASE_ID (hasBody?='{' body+=(ServiceAttribute | Action)* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//'controller' name=UPPER_CASE_ID (hasBody?='{' body+=(ServiceAttribute | Action)* '}' | ';')
		public Group getGroup() { return cGroup; }

		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//hasBody?='{' body+=(ServiceAttribute | Action)* '}' | ';'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasBody?='{' body+=(ServiceAttribute | Action)* '}'
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_2_0_0() { return cHasBodyAssignment_2_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_2_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_2_0_0_0; }

		//body+=(ServiceAttribute | Action)*
		public Assignment getBodyAssignment_2_0_1() { return cBodyAssignment_2_0_1; }

		//(ServiceAttribute | Action)
		public Alternatives getBodyAlternatives_2_0_1_0() { return cBodyAlternatives_2_0_1_0; }

		//ServiceAttribute
		public RuleCall getBodyServiceAttributeParserRuleCall_2_0_1_0_0() { return cBodyServiceAttributeParserRuleCall_2_0_1_0_0; }

		//Action
		public RuleCall getBodyActionParserRuleCall_2_0_1_0_1() { return cBodyActionParserRuleCall_2_0_1_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDefaultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0_0 = (Keyword)cDefaultAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cParametersAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_3_0_0 = (RuleCall)cParametersAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_0_3_1_1_0 = (RuleCall)cParametersAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cBodyAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cBodyMethodStatementParserRuleCall_0_6_0 = (RuleCall)cBodyAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cNativeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cNativeNativeKeyword_1_0_0_0 = (Keyword)cNativeAssignment_1_0_0.eContents().get(0);
		private final Assignment cDefaultAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0_1_0 = (Keyword)cDefaultAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cParametersAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_3_0_0 = (RuleCall)cParametersAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_3_1_1_0 = (RuleCall)cParametersAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Action:
		//	default?='default'? name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
		//	body+=MethodStatement* '}' | (native?='native' default?='default'?) name=LOWER_CASE_ID '(' (parameters+=Parameter (','
		//	parameters+=Parameter)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//default?='default'? name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
		//body+=MethodStatement* '}' | (native?='native' default?='default'?) name=LOWER_CASE_ID '(' (parameters+=Parameter (','
		//parameters+=Parameter)*)? ')' ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//default?='default'? name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
		//body+=MethodStatement* '}'
		public Group getGroup_0() { return cGroup_0; }

		//default?='default'?
		public Assignment getDefaultAssignment_0_0() { return cDefaultAssignment_0_0; }

		//'default'
		public Keyword getDefaultDefaultKeyword_0_0_0() { return cDefaultDefaultKeyword_0_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_0_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_0_3_0() { return cParametersAssignment_0_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_3_0_0() { return cParametersParameterParserRuleCall_0_3_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//','
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_0_3_1_1() { return cParametersAssignment_0_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_3_1_1_0() { return cParametersParameterParserRuleCall_0_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//body+=MethodStatement*
		public Assignment getBodyAssignment_0_6() { return cBodyAssignment_0_6; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_0_6_0() { return cBodyMethodStatementParserRuleCall_0_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }

		//(native?='native' default?='default'?) name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//';'
		public Group getGroup_1() { return cGroup_1; }

		//native?='native' default?='default'?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//native?='native'
		public Assignment getNativeAssignment_1_0_0() { return cNativeAssignment_1_0_0; }

		//'native'
		public Keyword getNativeNativeKeyword_1_0_0_0() { return cNativeNativeKeyword_1_0_0_0; }

		//default?='default'?
		public Assignment getDefaultAssignment_1_0_1() { return cDefaultAssignment_1_0_1; }

		//'default'
		public Keyword getDefaultDefaultKeyword_1_0_1_0() { return cDefaultDefaultKeyword_1_0_1_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_3_0() { return cParametersAssignment_1_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_3_0_0() { return cParametersParameterParserRuleCall_1_3_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//','
		public Keyword getCommaKeyword_1_3_1_0() { return cCommaKeyword_1_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_3_1_1() { return cParametersAssignment_1_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_3_1_1_0() { return cParametersParameterParserRuleCall_1_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constraint:
		//	'constraint' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ';';
		@Override public ParserRule getRule() { return rule; }

		//'constraint' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ';'
		public Group getGroup() { return cGroup; }

		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_2_1_0 = (RuleCall)cSuperTypesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuperTypesTypeParserRuleCall_2_2_1_0 = (RuleCall)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cHasBodyAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_3_0_0_0 = (Keyword)cHasBodyAssignment_3_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cBodyAttributeParserRuleCall_3_0_1_0 = (RuleCall)cBodyAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Actor:
		//	'actor' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=Attribute* '}'
		//	| ';');
		@Override public ParserRule getRule() { return rule; }

		//'actor' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=Attribute* '}' |
		//';')
		public Group getGroup() { return cGroup; }

		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('extends' superTypes+=Type (',' superTypes+=Type)*)?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_2_1_0() { return cSuperTypesTypeParserRuleCall_2_1_0; }

		//(',' superTypes+=Type)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=Type
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//Type
		public RuleCall getSuperTypesTypeParserRuleCall_2_2_1_0() { return cSuperTypesTypeParserRuleCall_2_2_1_0; }

		//hasBody?='{' body+=Attribute* '}' | ';'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//hasBody?='{' body+=Attribute* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_3_0_0() { return cHasBodyAssignment_3_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_3_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_3_0_0_0; }

		//body+=Attribute*
		public Assignment getBodyAssignment_3_0_1() { return cBodyAssignment_3_0_1; }

		//Attribute
		public RuleCall getBodyAttributeParserRuleCall_3_0_1_0() { return cBodyAttributeParserRuleCall_3_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function:
		//	Action | Method;
		@Override public ParserRule getRule() { return rule; }

		//Action | Method
		public Alternatives getAlternatives() { return cAlternatives; }

		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}

	public class ActionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ActionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencedElementActionCrossReference_1_0 = (CrossReference)cReferencedElementAssignment_1.eContents().get(0);
		private final RuleCall cReferencedElementActionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferencedElementActionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActionCall: // FIXME REmove ';'
		//	'->' referencedElement=[Action|QualifiedName] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//// FIXME REmove ';'
		//'->' referencedElement=[Action|QualifiedName] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }

		//// FIXME REmove ';'
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//referencedElement=[Action|QualifiedName]
		public Assignment getReferencedElementAssignment_1() { return cReferencedElementAssignment_1; }

		//[Action|QualifiedName]
		public CrossReference getReferencedElementActionCrossReference_1_0() { return cReferencedElementActionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getReferencedElementActionQualifiedNameParserRuleCall_1_0_1() { return cReferencedElementActionQualifiedNameParserRuleCall_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=Expression (',' parameters+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=Expression
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_0_0() { return cParametersExpressionParserRuleCall_3_0_0; }

		//(',' parameters+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_1_1_0() { return cParametersExpressionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ActionCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ActionCallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActionCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ActionCallStatement ActionCall:
		//	ActionCall ';';
		@Override public ParserRule getRule() { return rule; }

		//ActionCall ';'
		public Group getGroup() { return cGroup; }

		//ActionCall
		public RuleCall getActionCallParserRuleCall_0() { return cActionCallParserRuleCall_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.View");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//View:
		//	Page | Widget;
		@Override public ParserRule getRule() { return rule; }

		//Page | Widget
		public Alternatives getAlternatives() { return cAlternatives; }

		//Page
		public RuleCall getPageParserRuleCall_0() { return cPageParserRuleCall_0; }

		//Widget
		public RuleCall getWidgetParserRuleCall_1() { return cWidgetParserRuleCall_1; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cControlledByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cControllerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cControllerControllerCrossReference_4_0 = (CrossReference)cControllerAssignment_4.eContents().get(0);
		private final RuleCall cControllerControllerQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cControllerControllerCrossReference_4_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cHasBodyAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_5_0_0_0 = (Keyword)cHasBodyAssignment_5_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_5_0_1_0 = (RuleCall)cBodyAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Page:
		//	'page' name=UPPER_CASE_ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')? 'controlledBy'
		//	controller=[Controller|QualifiedName] (hasBody?='{' body+=ViewStatement* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//'page' name=UPPER_CASE_ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')? 'controlledBy'
		//controller=[Controller|QualifiedName] (hasBody?='{' body+=ViewStatement* '}' | ';')
		public Group getGroup() { return cGroup; }

		//'page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0_0() { return cParametersParameterParserRuleCall_2_1_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//'controlledBy'
		public Keyword getControlledByKeyword_3() { return cControlledByKeyword_3; }

		//controller=[Controller|QualifiedName]
		public Assignment getControllerAssignment_4() { return cControllerAssignment_4; }

		//[Controller|QualifiedName]
		public CrossReference getControllerControllerCrossReference_4_0() { return cControllerControllerCrossReference_4_0; }

		//QualifiedName
		public RuleCall getControllerControllerQualifiedNameParserRuleCall_4_0_1() { return cControllerControllerQualifiedNameParserRuleCall_4_0_1; }

		//hasBody?='{' body+=ViewStatement* '}' | ';'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_5_0() { return cGroup_5_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_5_0_0() { return cHasBodyAssignment_5_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_5_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_5_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_5_0_1() { return cBodyAssignment_5_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_5_0_1_0() { return cBodyViewStatementParserRuleCall_5_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Widget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidgetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUPPER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControlledByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControllerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cControllerControllerCrossReference_3_1_0 = (CrossReference)cControllerAssignment_3_1.eContents().get(0);
		private final RuleCall cControllerControllerQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cControllerControllerCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cHasBodyAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_4_0_0_0 = (Keyword)cHasBodyAssignment_4_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_4_0_1_0 = (RuleCall)cBodyAssignment_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//Widget:
		//	'widget' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('controlledBy'
		//	controller=[Controller|QualifiedName])? (hasBody?='{' body+=ViewStatement* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//'widget' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('controlledBy'
		//controller=[Controller|QualifiedName])? (hasBody?='{' body+=ViewStatement* '}' | ';')
		public Group getGroup() { return cGroup; }

		//'widget'
		public Keyword getWidgetKeyword_0() { return cWidgetKeyword_0; }

		//name=UPPER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UPPER_CASE_ID
		public RuleCall getNameUPPER_CASE_IDTerminalRuleCall_1_0() { return cNameUPPER_CASE_IDTerminalRuleCall_1_0; }

		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//('controlledBy' controller=[Controller|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//'controlledBy'
		public Keyword getControlledByKeyword_3_0() { return cControlledByKeyword_3_0; }

		//controller=[Controller|QualifiedName]
		public Assignment getControllerAssignment_3_1() { return cControllerAssignment_3_1; }

		//[Controller|QualifiedName]
		public CrossReference getControllerControllerCrossReference_3_1_0() { return cControllerControllerCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getControllerControllerQualifiedNameParserRuleCall_3_1_0_1() { return cControllerControllerQualifiedNameParserRuleCall_3_1_0_1; }

		//hasBody?='{' body+=ViewStatement* '}' | ';'
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_4_0() { return cGroup_4_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_4_0_0() { return cHasBodyAssignment_4_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_4_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_4_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_4_0_1() { return cBodyAssignment_4_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_4_0_1_0() { return cBodyViewStatementParserRuleCall_4_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }

		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class ViewStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ViewStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cViewInstanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNamedViewBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ViewStatement:
		//	IfView | ForView | ViewInstance | NamedViewBlock;
		@Override public ParserRule getRule() { return rule; }

		//IfView | ForView | ViewInstance | NamedViewBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfView
		public RuleCall getIfViewParserRuleCall_0() { return cIfViewParserRuleCall_0; }

		//ForView
		public RuleCall getForViewParserRuleCall_1() { return cForViewParserRuleCall_1; }

		//ViewInstance
		public RuleCall getViewInstanceParserRuleCall_2() { return cViewInstanceParserRuleCall_2; }

		//NamedViewBlock
		public RuleCall getNamedViewBlockParserRuleCall_3() { return cNamedViewBlockParserRuleCall_3; }
	}

	public class IfViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.IfView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIfViewAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cHasBodyAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_5_0_0_0 = (Keyword)cHasBodyAssignment_5_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_5_0_1_0 = (RuleCall)cBodyAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		
		//IfView:
		//	'if' {IfView} '(' condition=Expression ')' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement);
		@Override public ParserRule getRule() { return rule; }

		//'if' {IfView} '(' condition=Expression ')' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement)
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//{IfView}
		public Action getIfViewAction_1() { return cIfViewAction_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_5_0() { return cGroup_5_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_5_0_0() { return cHasBodyAssignment_5_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_5_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_5_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_5_0_1() { return cBodyAssignment_5_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_5_0_1_0() { return cBodyViewStatementParserRuleCall_5_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//body+=ViewStatement
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_5_1_0() { return cBodyViewStatementParserRuleCall_5_1_0; }
	}

	public class ForViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ForView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cForViewAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableForVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCollectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCollectionReferenceParserRuleCall_5_0 = (RuleCall)cCollectionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cHasBodyAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_7_0_0_0 = (Keyword)cHasBodyAssignment_7_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_7_0_1_0 = (RuleCall)cBodyAssignment_7_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Assignment cBodyAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_7_1_0 = (RuleCall)cBodyAssignment_7_1.eContents().get(0);
		
		//ForView:
		//	'for' {ForView} '(' variable=ForVariable 'in' collection=Reference ')' (hasBody?='{' body+=ViewStatement* '}' |
		//	body+=ViewStatement);
		@Override public ParserRule getRule() { return rule; }

		//'for' {ForView} '(' variable=ForVariable 'in' collection=Reference ')' (hasBody?='{' body+=ViewStatement* '}' |
		//body+=ViewStatement)
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//{ForView}
		public Action getForViewAction_1() { return cForViewAction_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//variable=ForVariable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//ForVariable
		public RuleCall getVariableForVariableParserRuleCall_3_0() { return cVariableForVariableParserRuleCall_3_0; }

		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//collection=Reference
		public Assignment getCollectionAssignment_5() { return cCollectionAssignment_5; }

		//Reference
		public RuleCall getCollectionReferenceParserRuleCall_5_0() { return cCollectionReferenceParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_7_0() { return cGroup_7_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_7_0_0() { return cHasBodyAssignment_7_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_7_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_7_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_7_0_1() { return cBodyAssignment_7_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_7_0_1_0() { return cBodyViewStatementParserRuleCall_7_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }

		//body+=ViewStatement
		public Assignment getBodyAssignment_7_1() { return cBodyAssignment_7_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_7_1_0() { return cBodyViewStatementParserRuleCall_7_1_0; }
	}

	public class ForVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ForVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ForVariable Variable:
		//	type=Type name=LOWER_CASE_ID;
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=LOWER_CASE_ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_0; }
	}

	public class ViewInstanceNoActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ViewInstanceNoAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeWidgetTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ViewInstanceNoAction ViewInstance:
		//	(name=LOWER_CASE_ID '=')? type=WidgetType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//(name=LOWER_CASE_ID '=')? type=WidgetType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup() { return cGroup; }

		//(name=LOWER_CASE_ID '=')?
		public Group getGroup_0() { return cGroup_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_0_0_0() { return cNameLOWER_CASE_IDTerminalRuleCall_0_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//type=WidgetType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//WidgetType
		public RuleCall getTypeWidgetTypeParserRuleCall_1_0() { return cTypeWidgetTypeParserRuleCall_1_0; }

		//('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_0() { return cParametersExpressionParserRuleCall_2_1_0; }

		//(',' parameters+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_2_1_0() { return cParametersExpressionParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class ViewInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ViewInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cViewInstanceNoActionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cActionCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionCallActionCallParserRuleCall_1_0 = (RuleCall)cActionCallAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasBodyAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_2_0_0_0 = (Keyword)cHasBodyAssignment_2_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_2_0_1_0 = (RuleCall)cBodyAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//ViewInstance:
		//	ViewInstanceNoAction actionCall=ActionCall? (hasBody?='{' body+=ViewStatement* '}' | ';');
		@Override public ParserRule getRule() { return rule; }

		//ViewInstanceNoAction actionCall=ActionCall? (hasBody?='{' body+=ViewStatement* '}' | ';')
		public Group getGroup() { return cGroup; }

		//ViewInstanceNoAction
		public RuleCall getViewInstanceNoActionParserRuleCall_0() { return cViewInstanceNoActionParserRuleCall_0; }

		//actionCall=ActionCall?
		public Assignment getActionCallAssignment_1() { return cActionCallAssignment_1; }

		//ActionCall
		public RuleCall getActionCallActionCallParserRuleCall_1_0() { return cActionCallActionCallParserRuleCall_1_0; }

		//hasBody?='{' body+=ViewStatement* '}' | ';'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_2_0_0() { return cHasBodyAssignment_2_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_2_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_2_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_2_0_1() { return cBodyAssignment_2_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_2_0_1_0() { return cBodyViewStatementParserRuleCall_2_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class NamedViewBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.NamedViewBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasBodyAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_2_0_0_0 = (Keyword)cHasBodyAssignment_2_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_2_0_1_0 = (RuleCall)cBodyAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cBodyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBodyViewStatementParserRuleCall_2_1_0 = (RuleCall)cBodyAssignment_2_1.eContents().get(0);
		
		//NamedViewBlock:
		//	name=LOWER_CASE_ID ':' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement);
		@Override public ParserRule getRule() { return rule; }

		//name=LOWER_CASE_ID ':' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement)
		public Group getGroup() { return cGroup; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_0_0() { return cNameLOWER_CASE_IDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasBody?='{' body+=ViewStatement* '}'
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_2_0_0() { return cHasBodyAssignment_2_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_2_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_2_0_0_0; }

		//body+=ViewStatement*
		public Assignment getBodyAssignment_2_0_1() { return cBodyAssignment_2_0_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_2_0_1_0() { return cBodyViewStatementParserRuleCall_2_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//body+=ViewStatement
		public Assignment getBodyAssignment_2_1() { return cBodyAssignment_2_1; }

		//ViewStatement
		public RuleCall getBodyViewStatementParserRuleCall_2_1_0() { return cBodyViewStatementParserRuleCall_2_1_0; }
	}

	public class WidgetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.WidgetType");
		private final Assignment cReferencedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedElementWidgetCrossReference_0 = (CrossReference)cReferencedElementAssignment.eContents().get(0);
		private final RuleCall cReferencedElementWidgetUPPER_CASE_IDTerminalRuleCall_0_1 = (RuleCall)cReferencedElementWidgetCrossReference_0.eContents().get(1);
		
		//WidgetType Type:
		//	referencedElement=[Widget|UPPER_CASE_ID];
		@Override public ParserRule getRule() { return rule; }

		//referencedElement=[Widget|UPPER_CASE_ID]
		public Assignment getReferencedElementAssignment() { return cReferencedElementAssignment; }

		//[Widget|UPPER_CASE_ID]
		public CrossReference getReferencedElementWidgetCrossReference_0() { return cReferencedElementWidgetCrossReference_0; }

		//UPPER_CASE_ID
		public RuleCall getReferencedElementWidgetUPPER_CASE_IDTerminalRuleCall_0_1() { return cReferencedElementWidgetUPPER_CASE_IDTerminalRuleCall_0_1; }
	}

	public class MethodStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.MethodStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cShowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cActionCallStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReferenceStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//MethodStatement:
		//	Variable | If | While | Show | For | ActionCallStatement | ReferenceStatement;
		@Override public ParserRule getRule() { return rule; }

		//Variable | If | While | Show | For | ActionCallStatement | ReferenceStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }

		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }

		//Show
		public RuleCall getShowParserRuleCall_3() { return cShowParserRuleCall_3; }

		//For
		public RuleCall getForParserRuleCall_4() { return cForParserRuleCall_4; }

		//ActionCallStatement
		public RuleCall getActionCallStatementParserRuleCall_5() { return cActionCallStatementParserRuleCall_5; }

		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_6() { return cReferenceStatementParserRuleCall_6; }
	}

	public class ReferenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ReferenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolEqualsSignKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolPlusSignEqualsSignKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSymbolHyphenMinusEqualsSignKeyword_1_1_2_0 = (Keyword)cSymbolAssignment_1_1_2.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSymbolAsteriskEqualsSignKeyword_1_1_3_0 = (Keyword)cSymbolAssignment_1_1_3.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final Keyword cSymbolSolidusEqualsSignKeyword_1_1_4_0 = (Keyword)cSymbolAssignment_1_1_4.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReferenceStatement MethodStatement:
		//	Reference ({Assignment.left=current} (symbol='=' | symbol='+=' | symbol='-=' | symbol='*=' | symbol='/=')
		//	right=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }

		//Reference ({Assignment.left=current} (symbol='=' | symbol='+=' | symbol='-=' | symbol='*=' | symbol='/=')
		//right=Expression)? ';'
		public Group getGroup() { return cGroup; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//({Assignment.left=current} (symbol='=' | symbol='+=' | symbol='-=' | symbol='*=' | symbol='/=') right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0() { return cAssignmentLeftAction_1_0; }

		//symbol='=' | symbol='+=' | symbol='-=' | symbol='*=' | symbol='/='
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//symbol='='
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }

		//'='
		public Keyword getSymbolEqualsSignKeyword_1_1_0_0() { return cSymbolEqualsSignKeyword_1_1_0_0; }

		//symbol='+='
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }

		//'+='
		public Keyword getSymbolPlusSignEqualsSignKeyword_1_1_1_0() { return cSymbolPlusSignEqualsSignKeyword_1_1_1_0; }

		//symbol='-='
		public Assignment getSymbolAssignment_1_1_2() { return cSymbolAssignment_1_1_2; }

		//'-='
		public Keyword getSymbolHyphenMinusEqualsSignKeyword_1_1_2_0() { return cSymbolHyphenMinusEqualsSignKeyword_1_1_2_0; }

		//symbol='*='
		public Assignment getSymbolAssignment_1_1_3() { return cSymbolAssignment_1_1_3; }

		//'*='
		public Keyword getSymbolAsteriskEqualsSignKeyword_1_1_3_0() { return cSymbolAsteriskEqualsSignKeyword_1_1_3_0; }

		//symbol='/='
		public Assignment getSymbolAssignment_1_1_4() { return cSymbolAssignment_1_1_4; }

		//'/='
		public Keyword getSymbolSolidusEqualsSignKeyword_1_1_4_0() { return cSymbolSolidusEqualsSignKeyword_1_1_4_0; }

		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cHasBodyAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_5_0_0_0 = (Keyword)cHasBodyAssignment_5_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_5_0_1_0 = (RuleCall)cBodyAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Assignment cElseBodyAssignment_6_1_0_1 = (Assignment)cGroup_6_1_0.eContents().get(1);
		private final RuleCall cElseBodyMethodStatementParserRuleCall_6_1_0_1_0 = (RuleCall)cElseBodyAssignment_6_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_0_2 = (Keyword)cGroup_6_1_0.eContents().get(2);
		private final Assignment cElseBodyAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cElseBodyMethodStatementParserRuleCall_6_1_1_0 = (RuleCall)cElseBodyAssignment_6_1_1.eContents().get(0);
		
		//If:
		//	{If} 'if' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement) (=> "else"
		//	('{' elseBody+=MethodStatement* '}' | elseBody+=MethodStatement))?;
		@Override public ParserRule getRule() { return rule; }

		//{If} 'if' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement) (=> "else" ('{'
		//elseBody+=MethodStatement* '}' | elseBody+=MethodStatement))?
		public Group getGroup() { return cGroup; }

		//{If}
		public Action getIfAction_0() { return cIfAction_0; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//hasBody?='{' body+=MethodStatement* '}'
		public Group getGroup_5_0() { return cGroup_5_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_5_0_0() { return cHasBodyAssignment_5_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_5_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_5_0_0_0; }

		//body+=MethodStatement*
		public Assignment getBodyAssignment_5_0_1() { return cBodyAssignment_5_0_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_5_0_1_0() { return cBodyMethodStatementParserRuleCall_5_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//body+=MethodStatement
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_5_1_0() { return cBodyMethodStatementParserRuleCall_5_1_0; }

		//(=> "else" ('{' elseBody+=MethodStatement* '}' | elseBody+=MethodStatement))?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//'{' elseBody+=MethodStatement* '}' | elseBody+=MethodStatement
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//'{' elseBody+=MethodStatement* '}'
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1_0_0() { return cLeftCurlyBracketKeyword_6_1_0_0; }

		//elseBody+=MethodStatement*
		public Assignment getElseBodyAssignment_6_1_0_1() { return cElseBodyAssignment_6_1_0_1; }

		//MethodStatement
		public RuleCall getElseBodyMethodStatementParserRuleCall_6_1_0_1_0() { return cElseBodyMethodStatementParserRuleCall_6_1_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6_1_0_2() { return cRightCurlyBracketKeyword_6_1_0_2; }

		//elseBody+=MethodStatement
		public Assignment getElseBodyAssignment_6_1_1() { return cElseBodyAssignment_6_1_1; }

		//MethodStatement
		public RuleCall getElseBodyMethodStatementParserRuleCall_6_1_1_0() { return cElseBodyMethodStatementParserRuleCall_6_1_1_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cHasBodyAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_5_0_0_0 = (Keyword)cHasBodyAssignment_5_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_5_0_1_0 = (RuleCall)cBodyAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		
		//While:
		//	{While} 'while' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement);
		@Override public ParserRule getRule() { return rule; }

		//{While} 'while' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement)
		public Group getGroup() { return cGroup; }

		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }

		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//hasBody?='{' body+=MethodStatement* '}'
		public Group getGroup_5_0() { return cGroup_5_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_5_0_0() { return cHasBodyAssignment_5_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_5_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_5_0_0_0; }

		//body+=MethodStatement*
		public Assignment getBodyAssignment_5_0_1() { return cBodyAssignment_5_0_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_5_0_1_0() { return cBodyMethodStatementParserRuleCall_5_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//body+=MethodStatement
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_5_1_0() { return cBodyMethodStatementParserRuleCall_5_1_0; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCollectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCollectionReferenceParserRuleCall_5_0 = (RuleCall)cCollectionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cHasBodyAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final Keyword cHasBodyLeftCurlyBracketKeyword_7_0_0_0 = (Keyword)cHasBodyAssignment_7_0_0.eContents().get(0);
		private final Assignment cBodyAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_7_0_1_0 = (RuleCall)cBodyAssignment_7_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Assignment cBodyAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cBodyMethodStatementParserRuleCall_7_1_0 = (RuleCall)cBodyAssignment_7_1.eContents().get(0);
		
		//For:
		//	{For} 'for' '(' variable=Variable 'in' collection=Reference ')' (hasBody?='{' body+=MethodStatement* '}' |
		//	body+=MethodStatement);
		@Override public ParserRule getRule() { return rule; }

		//{For} 'for' '(' variable=Variable 'in' collection=Reference ')' (hasBody?='{' body+=MethodStatement* '}' |
		//body+=MethodStatement)
		public Group getGroup() { return cGroup; }

		//{For}
		public Action getForAction_0() { return cForAction_0; }

		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }

		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//collection=Reference
		public Assignment getCollectionAssignment_5() { return cCollectionAssignment_5; }

		//Reference
		public RuleCall getCollectionReferenceParserRuleCall_5_0() { return cCollectionReferenceParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//hasBody?='{' body+=MethodStatement* '}'
		public Group getGroup_7_0() { return cGroup_7_0; }

		//hasBody?='{'
		public Assignment getHasBodyAssignment_7_0_0() { return cHasBodyAssignment_7_0_0; }

		//'{'
		public Keyword getHasBodyLeftCurlyBracketKeyword_7_0_0_0() { return cHasBodyLeftCurlyBracketKeyword_7_0_0_0; }

		//body+=MethodStatement*
		public Assignment getBodyAssignment_7_0_1() { return cBodyAssignment_7_0_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_7_0_1_0() { return cBodyMethodStatementParserRuleCall_7_0_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }

		//body+=MethodStatement
		public Assignment getBodyAssignment_7_1() { return cBodyAssignment_7_1; }

		//MethodStatement
		public RuleCall getBodyMethodStatementParserRuleCall_7_1_0() { return cBodyMethodStatementParserRuleCall_7_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWER_CASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Variable:
		//	type=Type name=LOWER_CASE_ID ('=' value=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=LOWER_CASE_ID ('=' value=Expression)? ';'
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=LOWER_CASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER_CASE_ID
		public RuleCall getNameLOWER_CASE_IDTerminalRuleCall_1_0() { return cNameLOWER_CASE_IDTerminalRuleCall_1_0; }

		//('=' value=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionViewInstanceNoActionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Show:
		//	{Show} 'show' expression=ViewInstanceNoAction ';';
		@Override public ParserRule getRule() { return rule; }

		//{Show} 'show' expression=ViewInstanceNoAction ';'
		public Group getGroup() { return cGroup; }

		//{Show}
		public Action getShowAction_0() { return cShowAction_0; }

		//'show'
		public Keyword getShowKeyword_1() { return cShowKeyword_1; }

		//expression=ViewInstanceNoAction
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ViewInstanceNoAction
		public RuleCall getExpressionViewInstanceNoActionParserRuleCall_2_0() { return cExpressionViewInstanceNoActionParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBoolTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	BoolTerm ({BinaryOperator.left=current} symbol='||' right=BoolTerm)*;
		@Override public ParserRule getRule() { return rule; }

		//BoolTerm ({BinaryOperator.left=current} symbol='||' right=BoolTerm)*
		public Group getGroup() { return cGroup; }

		//BoolTerm
		public RuleCall getBoolTermParserRuleCall_0() { return cBoolTermParserRuleCall_0; }

		//({BinaryOperator.left=current} symbol='||' right=BoolTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }

		//symbol='||'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }

		//'||'
		public Keyword getSymbolVerticalLineVerticalLineKeyword_1_1_0() { return cSymbolVerticalLineVerticalLineKeyword_1_1_0; }

		//right=BoolTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BoolTerm
		public RuleCall getRightBoolTermParserRuleCall_1_2_0() { return cRightBoolTermParserRuleCall_1_2_0; }
	}

	public class BoolTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.BoolTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolAmpersandAmpersandKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BoolTerm Expression:
		//	Negation ({BinaryOperator.left=current} symbol='&&' right=Negation)*;
		@Override public ParserRule getRule() { return rule; }

		//Negation ({BinaryOperator.left=current} symbol='&&' right=Negation)*
		public Group getGroup() { return cGroup; }

		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }

		//({BinaryOperator.left=current} symbol='&&' right=Negation)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }

		//symbol='&&'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }

		//'&&'
		public Keyword getSymbolAmpersandAmpersandKeyword_1_1_0() { return cSymbolAmpersandAmpersandKeyword_1_1_0; }

		//right=Negation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Negation
		public RuleCall getRightNegationParserRuleCall_1_2_0() { return cRightNegationParserRuleCall_1_2_0; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Negation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolExclamationMarkKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionNegationParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negation Expression:
		//	Comparison | {UnaryOperator} symbol='!' expression=Negation;
		@Override public ParserRule getRule() { return rule; }

		//Comparison | {UnaryOperator} symbol='!' expression=Negation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//{UnaryOperator} symbol='!' expression=Negation
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }

		//symbol='!'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }

		//'!'
		public Keyword getSymbolExclamationMarkKeyword_1_1_0() { return cSymbolExclamationMarkKeyword_1_1_0; }

		//expression=Negation
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Negation
		public RuleCall getExpressionNegationParserRuleCall_1_2_0() { return cExpressionNegationParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_1_1_2_0 = (Keyword)cSymbolAssignment_1_1_2.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_1_1_3_0 = (Keyword)cSymbolAssignment_1_1_3.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0 = (Keyword)cSymbolAssignment_1_1_4.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_1_1_5_0 = (Keyword)cSymbolAssignment_1_1_5.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_6 = (Assignment)cAlternatives_1_1.eContents().get(6);
		private final Keyword cSymbolIsKeyword_1_1_6_0 = (Keyword)cSymbolAssignment_1_1_6.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_7 = (Assignment)cAlternatives_1_1.eContents().get(7);
		private final Keyword cSymbolAsKeyword_1_1_7_0 = (Keyword)cSymbolAssignment_1_1_7.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	ArithmeticExpression ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//	| symbol='==' | symbol='is' | symbol='as') right=ArithmeticExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ArithmeticExpression ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!=' |
		//symbol='==' | symbol='is' | symbol='as') right=ArithmeticExpression)*
		public Group getGroup() { return cGroup; }

		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }

		//({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!=' | symbol='==' |
		//symbol='is' | symbol='as') right=ArithmeticExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }

		//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!=' | symbol='==' | symbol='is' | symbol='as'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//symbol='<='
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }

		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_1_1_0_0() { return cSymbolLessThanSignEqualsSignKeyword_1_1_0_0; }

		//symbol='>='
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }

		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0; }

		//symbol='>'
		public Assignment getSymbolAssignment_1_1_2() { return cSymbolAssignment_1_1_2; }

		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_1_1_2_0() { return cSymbolGreaterThanSignKeyword_1_1_2_0; }

		//symbol='<'
		public Assignment getSymbolAssignment_1_1_3() { return cSymbolAssignment_1_1_3; }

		//'<'
		public Keyword getSymbolLessThanSignKeyword_1_1_3_0() { return cSymbolLessThanSignKeyword_1_1_3_0; }

		//symbol='!='
		public Assignment getSymbolAssignment_1_1_4() { return cSymbolAssignment_1_1_4; }

		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0; }

		//symbol='=='
		public Assignment getSymbolAssignment_1_1_5() { return cSymbolAssignment_1_1_5; }

		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_1_1_5_0() { return cSymbolEqualsSignEqualsSignKeyword_1_1_5_0; }

		//symbol='is'
		public Assignment getSymbolAssignment_1_1_6() { return cSymbolAssignment_1_1_6; }

		//'is'
		public Keyword getSymbolIsKeyword_1_1_6_0() { return cSymbolIsKeyword_1_1_6_0; }

		//symbol='as'
		public Assignment getSymbolAssignment_1_1_7() { return cSymbolAssignment_1_1_7; }

		//'as'
		public Keyword getSymbolAsKeyword_1_1_7_0() { return cSymbolAsKeyword_1_1_7_0; }

		//right=ArithmeticExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_1_2_0() { return cRightArithmeticExpressionParserRuleCall_1_2_0; }
	}

	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolPlusSignKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolHyphenMinusKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ArithmeticExpression Expression:
		//	Term ({BinaryOperator.left=current} (symbol='+' | symbol='-') right=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//Term ({BinaryOperator.left=current} (symbol='+' | symbol='-') right=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({BinaryOperator.left=current} (symbol='+' | symbol='-') right=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }

		//symbol='+' | symbol='-'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//symbol='+'
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }

		//'+'
		public Keyword getSymbolPlusSignKeyword_1_1_0_0() { return cSymbolPlusSignKeyword_1_1_0_0; }

		//symbol='-'
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }

		//'-'
		public Keyword getSymbolHyphenMinusKeyword_1_1_1_0() { return cSymbolHyphenMinusKeyword_1_1_1_0; }

		//right=Term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolAsteriskKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolSolidusKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSymbolPercentSignKeyword_1_1_2_0 = (Keyword)cSymbolAssignment_1_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term Expression:
		//	Negative ({BinaryOperator.left=current} (symbol='*' | symbol='/' | symbol='%') right=Negative)*;
		@Override public ParserRule getRule() { return rule; }

		//Negative ({BinaryOperator.left=current} (symbol='*' | symbol='/' | symbol='%') right=Negative)*
		public Group getGroup() { return cGroup; }

		//Negative
		public RuleCall getNegativeParserRuleCall_0() { return cNegativeParserRuleCall_0; }

		//({BinaryOperator.left=current} (symbol='*' | symbol='/' | symbol='%') right=Negative)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }

		//symbol='*' | symbol='/' | symbol='%'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//symbol='*'
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }

		//'*'
		public Keyword getSymbolAsteriskKeyword_1_1_0_0() { return cSymbolAsteriskKeyword_1_1_0_0; }

		//symbol='/'
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }

		//'/'
		public Keyword getSymbolSolidusKeyword_1_1_1_0() { return cSymbolSolidusKeyword_1_1_1_0; }

		//symbol='%'
		public Assignment getSymbolAssignment_1_1_2() { return cSymbolAssignment_1_1_2; }

		//'%'
		public Keyword getSymbolPercentSignKeyword_1_1_2_0() { return cSymbolPercentSignKeyword_1_1_2_0; }

		//right=Negative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Negative
		public RuleCall getRightNegativeParserRuleCall_1_2_0() { return cRightNegativeParserRuleCall_1_2_0; }
	}

	public class NegativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Negative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionNegativeParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negative Expression:
		//	Factor | {UnaryOperator} '-' expression=Negative;
		@Override public ParserRule getRule() { return rule; }

		//Factor | {UnaryOperator} '-' expression=Negative
		public Alternatives getAlternatives() { return cAlternatives; }

		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//{UnaryOperator} '-' expression=Negative
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//expression=Negative
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Negative
		public RuleCall getExpressionNegativeParserRuleCall_1_2_0() { return cExpressionNegativeParserRuleCall_1_2_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStructInstanceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Factor Expression:
		//	'(' Expression ')' | LiteralValue | Reference | StructInstance;
		@Override public ParserRule getRule() { return rule; }

		//'(' Expression ')' | LiteralValue | Reference | StructInstance
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }

		//Reference
		public RuleCall getReferenceParserRuleCall_2() { return cReferenceParserRuleCall_2; }

		//StructInstance
		public RuleCall getStructInstanceParserRuleCall_3() { return cStructInstanceParserRuleCall_3; }
	}

	public class StructInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.StructInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//StructInstance:
		//	'new' type=Type ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'new' type=Type ('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup() { return cGroup; }

		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//('(' parameters+=Expression (',' parameters+=Expression)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_0() { return cParametersExpressionParserRuleCall_2_1_0; }

		//(',' parameters+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_2_1_0() { return cParametersExpressionParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedElementReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Map:
		////	'map' {Map} '[' (keys+=Expression '->' values+=Expression (',' keys+=Expression '->' values+=Expression)*)? ']';
		////List:
		////	{List} '[' (elements+=Expression (',' elements+=Expression)*)? ']';
		//Reference:
		//	ResourceReference | TypedElementReference;
		@Override public ParserRule getRule() { return rule; }

		//ResourceReference | TypedElementReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceReference
		public RuleCall getResourceReferenceParserRuleCall_0() { return cResourceReferenceParserRuleCall_0; }

		//TypedElementReference
		public RuleCall getTypedElementReferenceParserRuleCall_1() { return cTypedElementReferenceParserRuleCall_1; }
	}

	public class TypedElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.TypedElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMethodCallParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailReferenceTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//TypedElementReference Reference:
		//	(MethodCall | VariableReference | SimpleType) tail=ReferenceTail?;
		@Override public ParserRule getRule() { return rule; }

		//(MethodCall | VariableReference | SimpleType) tail=ReferenceTail?
		public Group getGroup() { return cGroup; }

		//MethodCall | VariableReference | SimpleType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall_0_0() { return cMethodCallParserRuleCall_0_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0_1() { return cVariableReferenceParserRuleCall_0_1; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0_2() { return cSimpleTypeParserRuleCall_0_2; }

		//tail=ReferenceTail?
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//ReferenceTail
		public RuleCall getTailReferenceTailParserRuleCall_1_0() { return cTailReferenceTailParserRuleCall_1_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferencedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencedElementVariableTypeElementCrossReference_1_0 = (CrossReference)cReferencedElementAssignment_1.eContents().get(0);
		private final RuleCall cReferencedElementVariableTypeElementLOWER_CASE_IDTerminalRuleCall_1_0_1 = (RuleCall)cReferencedElementVariableTypeElementCrossReference_1_0.eContents().get(1);
		
		//VariableReference:
		//	{VariableReference} referencedElement=[VariableTypeElement|LOWER_CASE_ID];
		@Override public ParserRule getRule() { return rule; }

		//{VariableReference} referencedElement=[VariableTypeElement|LOWER_CASE_ID]
		public Group getGroup() { return cGroup; }

		//{VariableReference}
		public Action getVariableReferenceAction_0() { return cVariableReferenceAction_0; }

		//referencedElement=[VariableTypeElement|LOWER_CASE_ID]
		public Assignment getReferencedElementAssignment_1() { return cReferencedElementAssignment_1; }

		//[VariableTypeElement|LOWER_CASE_ID]
		public CrossReference getReferencedElementVariableTypeElementCrossReference_1_0() { return cReferencedElementVariableTypeElementCrossReference_1_0; }

		//LOWER_CASE_ID
		public RuleCall getReferencedElementVariableTypeElementLOWER_CASE_IDTerminalRuleCall_1_0_1() { return cReferencedElementVariableTypeElementLOWER_CASE_IDTerminalRuleCall_1_0_1; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferencedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencedElementMethodCrossReference_1_0 = (CrossReference)cReferencedElementAssignment_1.eContents().get(0);
		private final RuleCall cReferencedElementMethodLOWER_CASE_IDTerminalRuleCall_1_0_1 = (RuleCall)cReferencedElementMethodCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodCall:
		//	{MethodCall} referencedElement=[Method|LOWER_CASE_ID] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//{MethodCall} referencedElement=[Method|LOWER_CASE_ID] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }

		//{MethodCall}
		public Action getMethodCallAction_0() { return cMethodCallAction_0; }

		//referencedElement=[Method|LOWER_CASE_ID]
		public Assignment getReferencedElementAssignment_1() { return cReferencedElementAssignment_1; }

		//[Method|LOWER_CASE_ID]
		public CrossReference getReferencedElementMethodCrossReference_1_0() { return cReferencedElementMethodCrossReference_1_0; }

		//LOWER_CASE_ID
		public RuleCall getReferencedElementMethodLOWER_CASE_IDTerminalRuleCall_1_0_1() { return cReferencedElementMethodLOWER_CASE_IDTerminalRuleCall_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=Expression (',' parameters+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=Expression
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_0_0() { return cParametersExpressionParserRuleCall_3_0_0; }

		//(',' parameters+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_1_1_0() { return cParametersExpressionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ReferenceTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ReferenceTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypedElementReferenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReferenceTail Reference:
		//	'.' TypedElementReference;
		@Override public ParserRule getRule() { return rule; }

		//'.' TypedElementReference
		public Group getGroup() { return cGroup; }

		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//TypedElementReference
		public RuleCall getTypedElementReferenceParserRuleCall_1() { return cTypedElementReferenceParserRuleCall_1; }
	}

	public class ResourceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ResourceReference");
		private final Assignment cReferencedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedElementResourceCrossReference_0 = (CrossReference)cReferencedElementAssignment.eContents().get(0);
		private final RuleCall cReferencedElementResourceResourceNameParserRuleCall_0_1 = (RuleCall)cReferencedElementResourceCrossReference_0.eContents().get(1);
		
		//ResourceReference:
		//	referencedElement=[Resource|ResourceName];
		@Override public ParserRule getRule() { return rule; }

		//referencedElement=[Resource|ResourceName]
		public Assignment getReferencedElementAssignment() { return cReferencedElementAssignment; }

		//[Resource|ResourceName]
		public CrossReference getReferencedElementResourceCrossReference_0() { return cReferencedElementResourceCrossReference_0; }

		//ResourceName
		public RuleCall getReferencedElementResourceResourceNameParserRuleCall_0_1() { return cReferencedElementResourceResourceNameParserRuleCall_0_1; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Bound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bound:
		//	INT | '*';
		@Override public ParserRule getRule() { return rule; }

		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Decimal:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }

		//INT '.' INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LiteralValue:
		//	IntValue | FloatValue | BoolValue | StringValue | NullValue;
		@Override public ParserRule getRule() { return rule; }

		//IntValue | FloatValue | BoolValue | StringValue | NullValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_3() { return cStringValueParserRuleCall_3; }

		//NullValue
		public RuleCall getNullValueParserRuleCall_4() { return cNullValueParserRuleCall_4; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.StringValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//StringValue:
		//	literal=STRING;
		@Override public ParserRule getRule() { return rule; }

		//literal=STRING
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_0() { return cLiteralSTRINGTerminalRuleCall_0; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.FloatValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralDecimalParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//FloatValue:
		//	literal=Decimal;
		@Override public ParserRule getRule() { return rule; }

		//literal=Decimal
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//Decimal
		public RuleCall getLiteralDecimalParserRuleCall_0() { return cLiteralDecimalParserRuleCall_0; }
	}

	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.BoolValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cLiteralAlternatives_1_0 = (Alternatives)cLiteralAssignment_1.eContents().get(0);
		private final Keyword cLiteralTrueKeyword_1_0_0 = (Keyword)cLiteralAlternatives_1_0.eContents().get(0);
		private final Keyword cLiteralFalseKeyword_1_0_1 = (Keyword)cLiteralAlternatives_1_0.eContents().get(1);
		
		//BoolValue:
		//	{BoolValue} literal=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }

		//{BoolValue} literal=('true' | 'false')
		public Group getGroup() { return cGroup; }

		//{BoolValue}
		public Action getBoolValueAction_0() { return cBoolValueAction_0; }

		//literal=('true' | 'false')
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }

		//('true' | 'false')
		public Alternatives getLiteralAlternatives_1_0() { return cLiteralAlternatives_1_0; }

		//'true'
		public Keyword getLiteralTrueKeyword_1_0_0() { return cLiteralTrueKeyword_1_0_0; }

		//'false'
		public Keyword getLiteralFalseKeyword_1_0_1() { return cLiteralFalseKeyword_1_0_1; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.IntValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralINTTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//IntValue:
		//	literal=INT;
		@Override public ParserRule getRule() { return rule; }

		//literal=INT
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//INT
		public RuleCall getLiteralINTTerminalRuleCall_0() { return cLiteralINTTerminalRuleCall_0; }
	}

	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.NullValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLiteralNullKeyword_0 = (Keyword)cLiteralAssignment.eContents().get(0);
		
		//NullValue:
		//	literal='null';
		@Override public ParserRule getRule() { return rule; }

		//literal='null'
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//'null'
		public Keyword getLiteralNullKeyword_0() { return cLiteralNullKeyword_0; }
	}

	public class ResourceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.ResourceName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ResourceName:
		//	'$' QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//'$' QualifiedName
		public Group getGroup() { return cGroup; }

		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWER_CASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUPPER_CASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWER_CASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUPPER_CASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//QualifiedName:
		//	(LOWER_CASE_ID | UPPER_CASE_ID) ('.' (LOWER_CASE_ID | UPPER_CASE_ID))*;
		@Override public ParserRule getRule() { return rule; }

		//(LOWER_CASE_ID | UPPER_CASE_ID) ('.' (LOWER_CASE_ID | UPPER_CASE_ID))*
		public Group getGroup() { return cGroup; }

		//LOWER_CASE_ID | UPPER_CASE_ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LOWER_CASE_ID
		public RuleCall getLOWER_CASE_IDTerminalRuleCall_0_0() { return cLOWER_CASE_IDTerminalRuleCall_0_0; }

		//UPPER_CASE_ID
		public RuleCall getUPPER_CASE_IDTerminalRuleCall_0_1() { return cUPPER_CASE_IDTerminalRuleCall_0_1; }

		//('.' (LOWER_CASE_ID | UPPER_CASE_ID))*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//LOWER_CASE_ID | UPPER_CASE_ID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//LOWER_CASE_ID
		public RuleCall getLOWER_CASE_IDTerminalRuleCall_1_1_0() { return cLOWER_CASE_IDTerminalRuleCall_1_1_0; }

		//UPPER_CASE_ID
		public RuleCall getUPPER_CASE_IDTerminalRuleCall_1_1_1() { return cUPPER_CASE_IDTerminalRuleCall_1_1_1; }
	}
	
	
	private final InformationSystemElements pInformationSystem;
	private final PackageElements pPackage;
	private final ImportElements pImport;
	private final ResourceElements pResource;
	private final ResourceBundleElements pResourceBundle;
	private final ResourceAssignmentElements pResourceAssignment;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final DTOElements pDTO;
	private final DTOAttributeElements pDTOAttribute;
	private final EnumElements pEnum;
	private final EnumItemElements pEnumItem;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final ParameterizedTypeElements pParameterizedType;
	private final SimpleTypeElements pSimpleType;
	private final TypeSpecificationElements pTypeSpecification;
	private final ConstraintInstanceElements pConstraintInstance;
	private final ConstraintTypeElements pConstraintType;
	private final PrimitiveElements pPrimitive;
	private final GenericTypeSpecificationElements pGenericTypeSpecification;
	private final ServiceElements pService;
	private final FeatureElements pFeature;
	private final MethodElements pMethod;
	private final NativeMethodElements pNativeMethod;
	private final RegularMethodElements pRegularMethod;
	private final ServiceAttributeElements pServiceAttribute;
	private final ControllerElements pController;
	private final ActionElements pAction;
	private final ConstraintElements pConstraint;
	private final ActorElements pActor;
	private final FunctionElements pFunction;
	private final ActionCallElements pActionCall;
	private final ActionCallStatementElements pActionCallStatement;
	private final ViewElements pView;
	private final PageElements pPage;
	private final WidgetElements pWidget;
	private final ViewStatementElements pViewStatement;
	private final IfViewElements pIfView;
	private final ForViewElements pForView;
	private final ForVariableElements pForVariable;
	private final ViewInstanceNoActionElements pViewInstanceNoAction;
	private final ViewInstanceElements pViewInstance;
	private final NamedViewBlockElements pNamedViewBlock;
	private final WidgetTypeElements pWidgetType;
	private final MethodStatementElements pMethodStatement;
	private final ReferenceStatementElements pReferenceStatement;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final VariableElements pVariable;
	private final ShowElements pShow;
	private final ExpressionElements pExpression;
	private final BoolTermElements pBoolTerm;
	private final NegationElements pNegation;
	private final ComparisonElements pComparison;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final TermElements pTerm;
	private final NegativeElements pNegative;
	private final FactorElements pFactor;
	private final StructInstanceElements pStructInstance;
	private final ReferenceElements pReference;
	private final TypedElementReferenceElements pTypedElementReference;
	private final VariableReferenceElements pVariableReference;
	private final MethodCallElements pMethodCall;
	private final ReferenceTailElements pReferenceTail;
	private final ResourceReferenceElements pResourceReference;
	private final BoundElements pBound;
	private final DecimalElements pDecimal;
	private final LiteralValueElements pLiteralValue;
	private final StringValueElements pStringValue;
	private final FloatValueElements pFloatValue;
	private final BoolValueElements pBoolValue;
	private final IntValueElements pIntValue;
	private final NullValueElements pNullValue;
	private final ResourceNameElements pResourceName;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tUPPER_CASE_ID;
	private final TerminalRule tLOWER_CASE_ID;
	private final TerminalRule tLINE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IsmlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInformationSystem = new InformationSystemElements();
		this.pPackage = new PackageElements();
		this.pImport = new ImportElements();
		this.pResource = new ResourceElements();
		this.pResourceBundle = new ResourceBundleElements();
		this.pResourceAssignment = new ResourceAssignmentElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pDTO = new DTOElements();
		this.pDTOAttribute = new DTOAttributeElements();
		this.pEnum = new EnumElements();
		this.pEnumItem = new EnumItemElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pParameterizedType = new ParameterizedTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pTypeSpecification = new TypeSpecificationElements();
		this.pConstraintInstance = new ConstraintInstanceElements();
		this.pConstraintType = new ConstraintTypeElements();
		this.pPrimitive = new PrimitiveElements();
		this.pGenericTypeSpecification = new GenericTypeSpecificationElements();
		this.pService = new ServiceElements();
		this.pFeature = new FeatureElements();
		this.pMethod = new MethodElements();
		this.pNativeMethod = new NativeMethodElements();
		this.pRegularMethod = new RegularMethodElements();
		this.pServiceAttribute = new ServiceAttributeElements();
		this.pController = new ControllerElements();
		this.pAction = new ActionElements();
		this.pConstraint = new ConstraintElements();
		this.pActor = new ActorElements();
		this.pFunction = new FunctionElements();
		this.pActionCall = new ActionCallElements();
		this.pActionCallStatement = new ActionCallStatementElements();
		this.pView = new ViewElements();
		this.pPage = new PageElements();
		this.pWidget = new WidgetElements();
		this.pViewStatement = new ViewStatementElements();
		this.pIfView = new IfViewElements();
		this.pForView = new ForViewElements();
		this.pForVariable = new ForVariableElements();
		this.pViewInstanceNoAction = new ViewInstanceNoActionElements();
		this.pViewInstance = new ViewInstanceElements();
		this.pNamedViewBlock = new NamedViewBlockElements();
		this.pWidgetType = new WidgetTypeElements();
		this.pMethodStatement = new MethodStatementElements();
		this.pReferenceStatement = new ReferenceStatementElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pVariable = new VariableElements();
		this.pShow = new ShowElements();
		this.pExpression = new ExpressionElements();
		this.pBoolTerm = new BoolTermElements();
		this.pNegation = new NegationElements();
		this.pComparison = new ComparisonElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pTerm = new TermElements();
		this.pNegative = new NegativeElements();
		this.pFactor = new FactorElements();
		this.pStructInstance = new StructInstanceElements();
		this.pReference = new ReferenceElements();
		this.pTypedElementReference = new TypedElementReferenceElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pMethodCall = new MethodCallElements();
		this.pReferenceTail = new ReferenceTailElements();
		this.pResourceReference = new ResourceReferenceElements();
		this.pBound = new BoundElements();
		this.pDecimal = new DecimalElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pStringValue = new StringValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pIntValue = new IntValueElements();
		this.pNullValue = new NullValueElements();
		this.pResourceName = new ResourceNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tUPPER_CASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.UPPER_CASE_ID");
		this.tLOWER_CASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.LOWER_CASE_ID");
		this.tLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.javeriana.isml.Isml.LINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.edu.javeriana.isml.Isml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//InformationSystem:
	//	body+=Package+;
	public InformationSystemElements getInformationSystemAccess() {
		return pInformationSystem;
	}
	
	public ParserRule getInformationSystemRule() {
		return getInformationSystemAccess().getRule();
	}

	//Package:
	//	'package' name=QualifiedName ';'
	//	imports+=Import* ('resources' hasBody?='{' body+=Resource* '}')?
	//	body+=(Entity | DTO | View | Controller | Primitive | Constraint | ResourceBundle | Actor | Service | Enum)*;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Import:
	//	'import' importedPackage=[Package|QualifiedName] '.*' ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Resource:
	//	name=ResourceName ';';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//ResourceBundle:
	//	'resourceBundle' name=UPPER_CASE_ID '{'
	//	body+=ResourceAssignment*
	//	'}';
	public ResourceBundleElements getResourceBundleAccess() {
		return pResourceBundle;
	}
	
	public ParserRule getResourceBundleRule() {
		return getResourceBundleAccess().getRule();
	}

	//ResourceAssignment:
	//	left=ResourceReference '=' right=StringValue ';';
	public ResourceAssignmentElements getResourceAssignmentAccess() {
		return pResourceAssignment;
	}
	
	public ParserRule getResourceAssignmentRule() {
		return getResourceAssignmentAccess().getRule();
	}

	//// Types
	//Entity:
	//	abstract?='abstract'? 'entity' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{'
	//	body+=Attribute* '}' | ';');
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//	type=Type name=LOWER_CASE_ID ('must' 'be'? constraints+=ConstraintInstance (',' constraints+=ConstraintInstance)*)?
	//	('opposite' opposite=[Attribute|QualifiedName])? ';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//DTO:
	//	'dto' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=DTOAttribute* '}' |
	//	';');
	public DTOElements getDTOAccess() {
		return pDTO;
	}
	
	public ParserRule getDTORule() {
		return getDTOAccess().getRule();
	}

	//DTOAttribute Attribute:
	//	type=Type name=LOWER_CASE_ID ';';
	public DTOAttributeElements getDTOAttributeAccess() {
		return pDTOAttribute;
	}
	
	public ParserRule getDTOAttributeRule() {
		return getDTOAttributeAccess().getRule();
	}

	//Enum:
	//	'enum' name=UPPER_CASE_ID '{' body+=EnumItem (',' body+=EnumItem)* '}';
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumItem:
	//	name=LOWER_CASE_ID;
	public EnumItemElements getEnumItemAccess() {
		return pEnumItem;
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}

	//Parameter:
	//	type=Type name=LOWER_CASE_ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Type:
	//	=> ParameterizedType | SimpleType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ParameterizedType:
	//	referencedElement=[TypeSpecification|UPPER_CASE_ID] => '<' typeParameters+=Type (',' typeParameters+=Type)* '>';
	public ParameterizedTypeElements getParameterizedTypeAccess() {
		return pParameterizedType;
	}
	
	public ParserRule getParameterizedTypeRule() {
		return getParameterizedTypeAccess().getRule();
	}

	//SimpleType Type:
	//	referencedElement=[TypeSpecification|UPPER_CASE_ID];
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//TypeSpecification:
	//	Primitive | Entity | Actor | Controller | View | ResourceBundle;
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return pTypeSpecification;
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}

	//ConstraintInstance:
	//	type=ConstraintType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
	public ConstraintInstanceElements getConstraintInstanceAccess() {
		return pConstraintInstance;
	}
	
	public ParserRule getConstraintInstanceRule() {
		return getConstraintInstanceAccess().getRule();
	}

	//ConstraintType Type:
	//	referencedElement=[Constraint|UPPER_CASE_ID];
	public ConstraintTypeElements getConstraintTypeAccess() {
		return pConstraintType;
	}
	
	public ParserRule getConstraintTypeRule() {
		return getConstraintTypeAccess().getRule();
	}

	//Primitive:
	//	abstract?='abstract'? 'primitive'
	//	name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
	//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)? ';';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//GenericTypeSpecification:
	//	name=UPPER_CASE_ID ('extends' superType=Type)?;
	public GenericTypeSpecificationElements getGenericTypeSpecificationAccess() {
		return pGenericTypeSpecification;
	}
	
	public ParserRule getGenericTypeSpecificationRule() {
		return getGenericTypeSpecificationAccess().getRule();
	}

	//Service:
	//	'service' name=UPPER_CASE_ID ('<' (genericTypeParameters+=GenericTypeSpecification (','
	//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? ('extends' superTypes+=Type)?
	//	hasBody?='{' body+=Feature* '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//Feature:
	//	=> Method | ServiceAttribute;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Method:
	//	RegularMethod | NativeMethod;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//NativeMethod Method:
	//	native?='native' ('<' (genericTypeParameters+=GenericTypeSpecification (','
	//	genericTypeParameters+=GenericTypeSpecification)*)? '>')? type=Type
	//	name=LOWER_CASE_ID '(' (parameters+=Parameter (','
	//	parameters+=Parameter)*)? ')' ';';
	public NativeMethodElements getNativeMethodAccess() {
		return pNativeMethod;
	}
	
	public ParserRule getNativeMethodRule() {
		return getNativeMethodAccess().getRule();
	}

	//RegularMethod Method:
	//	('<' (genericTypeParameters+=GenericTypeSpecification (','
	//	genericTypeParameters+=GenericTypeSpecification)*)? '>')?
	//	type=Type name=LOWER_CASE_ID
	//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (hasBody?='{' body+=MethodStatement* '}' | ';');
	public RegularMethodElements getRegularMethodAccess() {
		return pRegularMethod;
	}
	
	public ParserRule getRegularMethodRule() {
		return getRegularMethodAccess().getRule();
	}

	//ServiceAttribute Attribute:
	//	'has' type=Type name=LOWER_CASE_ID? ';';
	public ServiceAttributeElements getServiceAttributeAccess() {
		return pServiceAttribute;
	}
	
	public ParserRule getServiceAttributeRule() {
		return getServiceAttributeAccess().getRule();
	}

	//Controller:
	//	'controller' name=UPPER_CASE_ID (hasBody?='{' body+=(ServiceAttribute | Action)* '}' | ';');
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}

	//Action:
	//	default?='default'? name=LOWER_CASE_ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
	//	body+=MethodStatement* '}' | (native?='native' default?='default'?) name=LOWER_CASE_ID '(' (parameters+=Parameter (','
	//	parameters+=Parameter)*)? ')' ';';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Constraint:
	//	'constraint' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ';';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Actor:
	//	'actor' name=UPPER_CASE_ID ('extends' superTypes+=Type (',' superTypes+=Type)*)? (hasBody?='{' body+=Attribute* '}'
	//	| ';');
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Function:
	//	Action | Method;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//ActionCall: // FIXME REmove ';'
	//	'->' referencedElement=[Action|QualifiedName] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
	public ActionCallElements getActionCallAccess() {
		return pActionCall;
	}
	
	public ParserRule getActionCallRule() {
		return getActionCallAccess().getRule();
	}

	//ActionCallStatement ActionCall:
	//	ActionCall ';';
	public ActionCallStatementElements getActionCallStatementAccess() {
		return pActionCallStatement;
	}
	
	public ParserRule getActionCallStatementRule() {
		return getActionCallStatementAccess().getRule();
	}

	//View:
	//	Page | Widget;
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//Page:
	//	'page' name=UPPER_CASE_ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')? 'controlledBy'
	//	controller=[Controller|QualifiedName] (hasBody?='{' body+=ViewStatement* '}' | ';');
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//Widget:
	//	'widget' name=UPPER_CASE_ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('controlledBy'
	//	controller=[Controller|QualifiedName])? (hasBody?='{' body+=ViewStatement* '}' | ';');
	public WidgetElements getWidgetAccess() {
		return pWidget;
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}

	//ViewStatement:
	//	IfView | ForView | ViewInstance | NamedViewBlock;
	public ViewStatementElements getViewStatementAccess() {
		return pViewStatement;
	}
	
	public ParserRule getViewStatementRule() {
		return getViewStatementAccess().getRule();
	}

	//IfView:
	//	'if' {IfView} '(' condition=Expression ')' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement);
	public IfViewElements getIfViewAccess() {
		return pIfView;
	}
	
	public ParserRule getIfViewRule() {
		return getIfViewAccess().getRule();
	}

	//ForView:
	//	'for' {ForView} '(' variable=ForVariable 'in' collection=Reference ')' (hasBody?='{' body+=ViewStatement* '}' |
	//	body+=ViewStatement);
	public ForViewElements getForViewAccess() {
		return pForView;
	}
	
	public ParserRule getForViewRule() {
		return getForViewAccess().getRule();
	}

	//ForVariable Variable:
	//	type=Type name=LOWER_CASE_ID;
	public ForVariableElements getForVariableAccess() {
		return pForVariable;
	}
	
	public ParserRule getForVariableRule() {
		return getForVariableAccess().getRule();
	}

	//ViewInstanceNoAction ViewInstance:
	//	(name=LOWER_CASE_ID '=')? type=WidgetType ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
	public ViewInstanceNoActionElements getViewInstanceNoActionAccess() {
		return pViewInstanceNoAction;
	}
	
	public ParserRule getViewInstanceNoActionRule() {
		return getViewInstanceNoActionAccess().getRule();
	}

	//ViewInstance:
	//	ViewInstanceNoAction actionCall=ActionCall? (hasBody?='{' body+=ViewStatement* '}' | ';');
	public ViewInstanceElements getViewInstanceAccess() {
		return pViewInstance;
	}
	
	public ParserRule getViewInstanceRule() {
		return getViewInstanceAccess().getRule();
	}

	//NamedViewBlock:
	//	name=LOWER_CASE_ID ':' (hasBody?='{' body+=ViewStatement* '}' | body+=ViewStatement);
	public NamedViewBlockElements getNamedViewBlockAccess() {
		return pNamedViewBlock;
	}
	
	public ParserRule getNamedViewBlockRule() {
		return getNamedViewBlockAccess().getRule();
	}

	//WidgetType Type:
	//	referencedElement=[Widget|UPPER_CASE_ID];
	public WidgetTypeElements getWidgetTypeAccess() {
		return pWidgetType;
	}
	
	public ParserRule getWidgetTypeRule() {
		return getWidgetTypeAccess().getRule();
	}

	//MethodStatement:
	//	Variable | If | While | Show | For | ActionCallStatement | ReferenceStatement;
	public MethodStatementElements getMethodStatementAccess() {
		return pMethodStatement;
	}
	
	public ParserRule getMethodStatementRule() {
		return getMethodStatementAccess().getRule();
	}

	//ReferenceStatement MethodStatement:
	//	Reference ({Assignment.left=current} (symbol='=' | symbol='+=' | symbol='-=' | symbol='*=' | symbol='/=')
	//	right=Expression)? ';';
	public ReferenceStatementElements getReferenceStatementAccess() {
		return pReferenceStatement;
	}
	
	public ParserRule getReferenceStatementRule() {
		return getReferenceStatementAccess().getRule();
	}

	//If:
	//	{If} 'if' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement) (=> "else"
	//	('{' elseBody+=MethodStatement* '}' | elseBody+=MethodStatement))?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//While:
	//	{While} 'while' '(' condition=Expression ')' (hasBody?='{' body+=MethodStatement* '}' | body+=MethodStatement);
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	{For} 'for' '(' variable=Variable 'in' collection=Reference ')' (hasBody?='{' body+=MethodStatement* '}' |
	//	body+=MethodStatement);
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//Variable:
	//	type=Type name=LOWER_CASE_ID ('=' value=Expression)? ';';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Show:
	//	{Show} 'show' expression=ViewInstanceNoAction ';';
	public ShowElements getShowAccess() {
		return pShow;
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}

	//Expression:
	//	BoolTerm ({BinaryOperator.left=current} symbol='||' right=BoolTerm)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BoolTerm Expression:
	//	Negation ({BinaryOperator.left=current} symbol='&&' right=Negation)*;
	public BoolTermElements getBoolTermAccess() {
		return pBoolTerm;
	}
	
	public ParserRule getBoolTermRule() {
		return getBoolTermAccess().getRule();
	}

	//Negation Expression:
	//	Comparison | {UnaryOperator} symbol='!' expression=Negation;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Comparison Expression:
	//	ArithmeticExpression ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	//	| symbol='==' | symbol='is' | symbol='as') right=ArithmeticExpression)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//ArithmeticExpression Expression:
	//	Term ({BinaryOperator.left=current} (symbol='+' | symbol='-') right=Term)*;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//Term Expression:
	//	Negative ({BinaryOperator.left=current} (symbol='*' | symbol='/' | symbol='%') right=Negative)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Negative Expression:
	//	Factor | {UnaryOperator} '-' expression=Negative;
	public NegativeElements getNegativeAccess() {
		return pNegative;
	}
	
	public ParserRule getNegativeRule() {
		return getNegativeAccess().getRule();
	}

	//Factor Expression:
	//	'(' Expression ')' | LiteralValue | Reference | StructInstance;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//StructInstance:
	//	'new' type=Type ('(' parameters+=Expression (',' parameters+=Expression)* ')')?;
	public StructInstanceElements getStructInstanceAccess() {
		return pStructInstance;
	}
	
	public ParserRule getStructInstanceRule() {
		return getStructInstanceAccess().getRule();
	}

	////Map:
	////	'map' {Map} '[' (keys+=Expression '->' values+=Expression (',' keys+=Expression '->' values+=Expression)*)? ']';
	////List:
	////	{List} '[' (elements+=Expression (',' elements+=Expression)*)? ']';
	//Reference:
	//	ResourceReference | TypedElementReference;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//TypedElementReference Reference:
	//	(MethodCall | VariableReference | SimpleType) tail=ReferenceTail?;
	public TypedElementReferenceElements getTypedElementReferenceAccess() {
		return pTypedElementReference;
	}
	
	public ParserRule getTypedElementReferenceRule() {
		return getTypedElementReferenceAccess().getRule();
	}

	//VariableReference:
	//	{VariableReference} referencedElement=[VariableTypeElement|LOWER_CASE_ID];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//MethodCall:
	//	{MethodCall} referencedElement=[Method|LOWER_CASE_ID] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//ReferenceTail Reference:
	//	'.' TypedElementReference;
	public ReferenceTailElements getReferenceTailAccess() {
		return pReferenceTail;
	}
	
	public ParserRule getReferenceTailRule() {
		return getReferenceTailAccess().getRule();
	}

	//ResourceReference:
	//	referencedElement=[Resource|ResourceName];
	public ResourceReferenceElements getResourceReferenceAccess() {
		return pResourceReference;
	}
	
	public ParserRule getResourceReferenceRule() {
		return getResourceReferenceAccess().getRule();
	}

	//Bound:
	//	INT | '*';
	public BoundElements getBoundAccess() {
		return pBound;
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	//Decimal:
	//	INT '.' INT;
	public DecimalElements getDecimalAccess() {
		return pDecimal;
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//LiteralValue:
	//	IntValue | FloatValue | BoolValue | StringValue | NullValue;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//StringValue:
	//	literal=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//FloatValue:
	//	literal=Decimal;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BoolValue:
	//	{BoolValue} literal=('true' | 'false');
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//IntValue:
	//	literal=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//NullValue:
	//	literal='null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}

	//ResourceName:
	//	'$' QualifiedName;
	public ResourceNameElements getResourceNameAccess() {
		return pResourceName;
	}
	
	public ParserRule getResourceNameRule() {
		return getResourceNameAccess().getRule();
	}

	//QualifiedName:
	//	(LOWER_CASE_ID | UPPER_CASE_ID) ('.' (LOWER_CASE_ID | UPPER_CASE_ID))*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal UPPER_CASE_ID:
	//	'A'..'Z' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getUPPER_CASE_IDRule() {
		return tUPPER_CASE_ID;
	} 

	//terminal LOWER_CASE_ID:
	//	'^'? ('a'..'z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getLOWER_CASE_IDRule() {
		return tLOWER_CASE_ID;
	} 

	//terminal LINE:
	//	'--' '-'*;
	public TerminalRule getLINERule() {
		return tLINE;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
