/*
 * generated by Xtext
 */
package co.edu.javeriana.isml.serializer;

import co.edu.javeriana.isml.services.IsmlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class IsmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected IsmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_BeKeyword_2_1_q;
	protected AbstractElementAlias match_Factor_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Factor_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_If___ElseKeyword_6_0_LeftCurlyBracketKeyword_6_1_0_0_RightCurlyBracketKeyword_6_1_0_2__q;
	protected AbstractElementAlias match_NativeMethod___LessThanSignKeyword_1_0_GreaterThanSignKeyword_1_2__q;
	protected AbstractElementAlias match_Page___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_Primitive___LessThanSignKeyword_3_0_GreaterThanSignKeyword_3_2__q;
	protected AbstractElementAlias match_RegularMethod___LessThanSignKeyword_0_0_GreaterThanSignKeyword_0_2__q;
	protected AbstractElementAlias match_Service___LessThanSignKeyword_2_0_GreaterThanSignKeyword_2_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (IsmlGrammarAccess) access;
		match_Attribute_BeKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getBeKeyword_2_1());
		match_Factor_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
		match_Factor_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
		match_If___ElseKeyword_6_0_LeftCurlyBracketKeyword_6_1_0_0_RightCurlyBracketKeyword_6_1_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getElseKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_6_1_0_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_6_1_0_2()));
		match_NativeMethod___LessThanSignKeyword_1_0_GreaterThanSignKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNativeMethodAccess().getLessThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getNativeMethodAccess().getGreaterThanSignKeyword_1_2()));
		match_Page___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPageAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getPageAccess().getRightParenthesisKeyword_2_2()));
		match_Primitive___LessThanSignKeyword_3_0_GreaterThanSignKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrimitiveAccess().getLessThanSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getPrimitiveAccess().getGreaterThanSignKeyword_3_2()));
		match_RegularMethod___LessThanSignKeyword_0_0_GreaterThanSignKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRegularMethodAccess().getLessThanSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getRegularMethodAccess().getGreaterThanSignKeyword_0_2()));
		match_Service___LessThanSignKeyword_2_0_GreaterThanSignKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getServiceAccess().getLessThanSignKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getGreaterThanSignKeyword_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Attribute_BeKeyword_2_1_q.equals(syntax))
				emit_Attribute_BeKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Factor_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Factor_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If___ElseKeyword_6_0_LeftCurlyBracketKeyword_6_1_0_0_RightCurlyBracketKeyword_6_1_0_2__q.equals(syntax))
				emit_If___ElseKeyword_6_0_LeftCurlyBracketKeyword_6_1_0_0_RightCurlyBracketKeyword_6_1_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NativeMethod___LessThanSignKeyword_1_0_GreaterThanSignKeyword_1_2__q.equals(syntax))
				emit_NativeMethod___LessThanSignKeyword_1_0_GreaterThanSignKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Page___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_Page___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primitive___LessThanSignKeyword_3_0_GreaterThanSignKeyword_3_2__q.equals(syntax))
				emit_Primitive___LessThanSignKeyword_3_0_GreaterThanSignKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularMethod___LessThanSignKeyword_0_0_GreaterThanSignKeyword_0_2__q.equals(syntax))
				emit_RegularMethod___LessThanSignKeyword_0_0_GreaterThanSignKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service___LessThanSignKeyword_2_0_GreaterThanSignKeyword_2_2__q.equals(syntax))
				emit_Service___LessThanSignKeyword_2_0_GreaterThanSignKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'be'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=LOWER_CASE_ID 'must' (ambiguity) constraints+=ConstraintInstance
	 */
	protected void emit_Attribute_BeKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' expression=Negative
	 *     (rule start) (ambiguity) 'new' type=Type
	 *     (rule start) (ambiguity) literal='false'
	 *     (rule start) (ambiguity) literal='null'
	 *     (rule start) (ambiguity) literal='true'
	 *     (rule start) (ambiguity) literal=Decimal
	 *     (rule start) (ambiguity) literal=INT
	 *     (rule start) (ambiguity) literal=STRING
	 *     (rule start) (ambiguity) referencedElement=[Method|LOWER_CASE_ID]
	 *     (rule start) (ambiguity) referencedElement=[Resource|ResourceName]
	 *     (rule start) (ambiguity) referencedElement=[TypeSpecification|UPPER_CASE_ID]
	 *     (rule start) (ambiguity) referencedElement=[VariableTypeElement|LOWER_CASE_ID]
	 *     (rule start) (ambiguity) symbol='!'
	 *     (rule start) (ambiguity) {BinaryOperator.left=}
	 */
	protected void emit_Factor_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' expression=Negative
	 *     (rule start) (ambiguity) symbol='!'
	 *     (rule start) (ambiguity) {BinaryOperator.left=}
	 */
	protected void emit_Factor_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     body+=MethodStatement '}' (ambiguity) (rule end)
	 *     body+=MethodStatement (ambiguity) (rule end)
	 *     hasBody?='{' '}' (ambiguity) (rule end)
	 */
	protected void emit_If___ElseKeyword_6_0_LeftCurlyBracketKeyword_6_1_0_0_RightCurlyBracketKeyword_6_1_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<' '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     native?='native' (ambiguity) type=Type
	 */
	protected void emit_NativeMethod___LessThanSignKeyword_1_0_GreaterThanSignKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=UPPER_CASE_ID (ambiguity) 'controlledBy' controller=[Controller|QualifiedName]
	 */
	protected void emit_Page___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<' '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=UPPER_CASE_ID (ambiguity) ';' (rule end)
	 *     name=UPPER_CASE_ID (ambiguity) 'extends' superTypes+=Type
	 */
	protected void emit_Primitive___LessThanSignKeyword_3_0_GreaterThanSignKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<' '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=Type
	 */
	protected void emit_RegularMethod___LessThanSignKeyword_0_0_GreaterThanSignKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<' '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=UPPER_CASE_ID (ambiguity) 'extends' superTypes+=Type
	 *     name=UPPER_CASE_ID (ambiguity) hasBody?='{'
	 */
	protected void emit_Service___LessThanSignKeyword_2_0_GreaterThanSignKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
