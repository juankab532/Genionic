/**
 * generated by Xtext
 */
package co.edu.javeriana.isml.ui.outline;

import co.edu.javeriana.isml.isml.Action;
import co.edu.javeriana.isml.isml.ActionCall;
import co.edu.javeriana.isml.isml.Attribute;
import co.edu.javeriana.isml.isml.CompositeElement;
import co.edu.javeriana.isml.isml.Constraint;
import co.edu.javeriana.isml.isml.Controller;
import co.edu.javeriana.isml.isml.Element;
import co.edu.javeriana.isml.isml.Entity;
import co.edu.javeriana.isml.isml.ForView;
import co.edu.javeriana.isml.isml.Function;
import co.edu.javeriana.isml.isml.IfView;
import co.edu.javeriana.isml.isml.Import;
import co.edu.javeriana.isml.isml.InformationSystem;
import co.edu.javeriana.isml.isml.Instance;
import co.edu.javeriana.isml.isml.Method;
import co.edu.javeriana.isml.isml.NamedElement;
import co.edu.javeriana.isml.isml.Page;
import co.edu.javeriana.isml.isml.Parameter;
import co.edu.javeriana.isml.isml.ParameterizedType;
import co.edu.javeriana.isml.isml.Reference;
import co.edu.javeriana.isml.isml.Type;
import co.edu.javeriana.isml.isml.TypeSpecification;
import co.edu.javeriana.isml.isml.ViewInstance;
import co.edu.javeriana.isml.isml.ViewStatement;
import co.edu.javeriana.isml.scoping.IsmlModelNavigation;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
@SuppressWarnings("all")
public class IsmlOutlineTreeProvider extends DefaultOutlineTreeProvider {
  @Inject
  @Extension
  private IImageHelper _iImageHelper;
  
  @Inject
  @Extension
  private IsmlModelNavigation _ismlModelNavigation;
  
  protected void _createChildren(final DocumentRootNode parentNode, final InformationSystem is) {
    EList<NamedElement> _components = this._ismlModelNavigation.getComponents(is);
    for (final NamedElement element : _components) {
      this.createNode(parentNode, element);
    }
  }
  
  protected Object _createNode(final IOutlineNode parentNode, final Import imp) {
    return null;
  }
  
  protected Object _createNode(final IOutlineNode parentNode, final Parameter par) {
    return null;
  }
  
  protected Object _createNode(final IOutlineNode parentNode, final Type t) {
    return null;
  }
  
  protected <T extends Element> void _createChildren(final IOutlineNode parentNode, final CompositeElement<T> statement) {
    EList<T> _body = statement.getBody();
    for (final T block : _body) {
      this.createNode(parentNode, block);
    }
  }
  
  protected Object _createChildren(final IOutlineNode parentNode, final Action action) {
    return null;
  }
  
  protected String _toText(final ParameterizedType type) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = this._ismlModelNavigation.getTypeSpecification(type).getName();
    _builder.append(_name);
    String _text = this.toText(type.getTypeParameters());
    _builder.append(_text);
    return _builder.toString();
  }
  
  protected String _toText(final Type type) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = this._ismlModelNavigation.getTypeSpecification(type).getName();
    _builder.append(_name);
    return _builder.toString();
  }
  
  protected String toText(final Iterable<Type> typeParams) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(typeParams, null));
      if (_notEquals) {
        _builder.append("<");
        {
          boolean _hasElements = false;
          for(final Type t : typeParams) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            String _text = this.toText(t);
            _builder.append(_text);
          }
        }
        _builder.append(">");
      }
    }
    return _builder.toString();
  }
  
  protected String _text(final Attribute attr) {
    StringConcatenation _builder = new StringConcatenation();
    String _text = this.toText(attr.getType());
    _builder.append(_text);
    _builder.append(" ");
    String _name = attr.getName();
    _builder.append(_name);
    String _oppositeToText = this.oppositeToText(attr);
    _builder.append(_oppositeToText);
    return _builder.toString();
  }
  
  protected String oppositeToText(final Attribute attr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Attribute _opposite = attr.getOpposite();
      boolean _notEquals = (!Objects.equal(_opposite, null));
      if (_notEquals) {
        _builder.append(" -- ");
        String _name = attr.getOpposite().getName();
        _builder.append(_name);
      }
    }
    return _builder.toString();
  }
  
  protected String _text(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = null;
    if (action!=null) {
      _name=action.getName();
    }
    _builder.append(_name);
    _builder.append(" ");
    EList<Parameter> _parameters = null;
    if (action!=null) {
      _parameters=action.getParameters();
    }
    String _text = null;
    if (_parameters!=null) {
      _text=this.toText(_parameters);
    }
    _builder.append(_text);
    return _builder.toString();
  }
  
  protected String _text(final Method method) {
    StringConcatenation _builder = new StringConcatenation();
    String _text = this.toText(method.getType());
    _builder.append(_text);
    _builder.append(" ");
    String _name = null;
    if (method!=null) {
      _name=method.getName();
    }
    _builder.append(_name);
    _builder.append(" ");
    EList<Parameter> _parameters = null;
    if (method!=null) {
      _parameters=method.getParameters();
    }
    String _text_1 = null;
    if (_parameters!=null) {
      _text_1=this.toText(_parameters);
    }
    _builder.append(_text_1);
    return _builder.toString();
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final IfView ifvp) {
    EList<ViewStatement> _body = ifvp.getBody();
    for (final ViewStatement element : _body) {
      this.createNode(parentNode, element);
    }
  }
  
  protected String _text(final ViewInstance vi) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = this._ismlModelNavigation.getTypeSpecification(vi.getType()).getName();
    _builder.append(_name);
    EList<Parameter> _parameters = this._ismlModelNavigation.getTypeSpecification(vi.getType()).getParameters();
    String _text = null;
    if (_parameters!=null) {
      _text=this.toText(_parameters);
    }
    _builder.append(_text);
    _builder.append(" ");
    ActionCall _actionCall = vi.getActionCall();
    String _text_1 = null;
    if (_actionCall!=null) {
      _text_1=this.toText(_actionCall);
    }
    _builder.append(_text_1);
    return _builder.toString();
  }
  
  public String toText(final EList<Parameter> params) {
    StringConcatenation _builder = new StringConcatenation();
    String _xifexpression = null;
    boolean _isEmpty = params.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      _xifexpression = "(";
    }
    _builder.append(_xifexpression);
    {
      boolean _hasElements = false;
      for(final Parameter p : params) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        String _name = this._ismlModelNavigation.getTypeSpecification(p.getType()).getName();
        _builder.append(_name);
      }
    }
    String _xifexpression_1 = null;
    boolean _isEmpty_1 = params.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      _xifexpression_1 = ")";
    }
    _builder.append(_xifexpression_1);
    return _builder.toString();
  }
  
  protected String _text(final IfView ifvp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if");
    return _builder.toString();
  }
  
  protected String _text(final Reference ref) {
    String _xblockexpression = null;
    {
      String _name = ref.getReferencedElement().getName();
      String str = ("" + _name);
      Reference r = ref.getTail();
      while ((!Objects.equal(r, null))) {
        {
          String _str = str;
          String _name_1 = r.getReferencedElement().getName();
          String _plus = ("." + _name_1);
          str = (_str + _plus);
          r = r.getTail();
        }
      }
      _xblockexpression = str;
    }
    return _xblockexpression;
  }
  
  public String toText(final ActionCall actionCall) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-> ");
    String _name = actionCall.getReferencedElement().getName();
    _builder.append(_name);
    _builder.append(" ");
    Action _referencedElement = actionCall.getReferencedElement();
    EList<Parameter> _parameters = ((Function) _referencedElement).getParameters();
    String _text = null;
    if (_parameters!=null) {
      _text=this.toText(_parameters);
    }
    _builder.append(_text);
    return _builder.toString();
  }
  
  public String _text(final Instance inst) {
    StringConcatenation _builder = new StringConcatenation();
    String _text = this.toText(inst.getType());
    _builder.append(_text);
    String _text_1 = this.toText(this._ismlModelNavigation.getTypeSpecification(inst.getType()).getParameters());
    _builder.append(_text_1);
    return _builder.toString();
  }
  
  public String _text(final ForView f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for (");
    String _name = f.getVariable().getName();
    _builder.append(_name);
    _builder.append(" in ");
    String _name_1 = f.getCollection().getReferencedElement().getName();
    _builder.append(_name_1);
    _builder.append(")");
    return _builder.toString();
  }
  
  public Image _image(final Method m) {
    return this._iImageHelper.getImage("blueSquare.png");
  }
  
  public Image _image(final Action a) {
    return this._iImageHelper.getImage("blueArrow.png");
  }
  
  public Image _image(final Entity e) {
    return this._iImageHelper.getImage("entity.png");
  }
  
  public Image _image(final Attribute a) {
    return this._iImageHelper.getImage("greenDot.png");
  }
  
  public Image _image(final Package a) {
    return this._iImageHelper.getImage("package.png");
  }
  
  public Image _image(final Page p) {
    return this._iImageHelper.getImage("view.png");
  }
  
  public Image _image(final Controller c) {
    return this._iImageHelper.getImage("controller.png");
  }
  
  public Image _image(final Instance inst) {
    Image _xifexpression = null;
    TypeSpecification _typeSpecification = this._ismlModelNavigation.getTypeSpecification(inst.getType());
    if ((_typeSpecification instanceof Constraint)) {
      _xifexpression = this._iImageHelper.getImage("chain.png");
    } else {
      _xifexpression = this._iImageHelper.getImage("default.png");
    }
    return _xifexpression;
  }
  
  public Image _image(final ViewInstance vi) {
    return this._iImageHelper.getImage("default.png");
  }
  
  public Image _image(final IfView ifvp) {
    return this._iImageHelper.getImage("default.png");
  }
  
  protected String toText(final Type type) {
    if (type instanceof ParameterizedType) {
      return _toText((ParameterizedType)type);
    } else if (type != null) {
      return _toText(type);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type).toString());
    }
  }
}
